
PowerSupply.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000208  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fcb  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f3  00000000  00000000  00001323  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000065f  00000000  00000000  00001c16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000188  00000000  00000000  00002278  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053a  00000000  00000000  00002400  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000078e  00000000  00000000  0000293a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000030c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	b4 d0       	rcall	.+360    	; 0x1aa <main>
  42:	e0 c0       	rjmp	.+448    	; 0x204 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <ClockPrescalerSet1>:
    }
}

void ClockPrescalerSet1()
{
	CCP = 0xd8;
  46:	88 ed       	ldi	r24, 0xD8	; 216
  48:	86 bf       	out	0x36, r24	; 54
	CLKPR = 0b00000000;
  4a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fe061>
  4e:	08 95       	ret

00000050 <IOInit>:
}

void IOInit()
{
	DDRA = 0x07;
  50:	87 e0       	ldi	r24, 0x07	; 7
  52:	81 b9       	out	0x01, r24	; 1
	DDRB = 0x00; // CS lijnen uitzoeken
  54:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xff;
  56:	8f ef       	ldi	r24, 0xFF	; 255
  58:	89 b9       	out	0x09, r24	; 9
  5a:	08 95       	ret

0000005c <SPI_MasterInit>:
}

void SPI_MasterInit()
{
	/* MOSI and SCK -> output, RST and MISO -> input */
	DDRD = 0b00001001;
  5c:	89 e0       	ldi	r24, 0x09	; 9
  5e:	8d b9       	out	0x0d, r24	; 13
	/* Enable SPI, Master, clock -> 500 KHz */
	SPCR = 0b01010001;
  60:	81 e5       	ldi	r24, 0x51	; 81
  62:	8c bd       	out	0x2c, r24	; 44
  64:	08 95       	ret

00000066 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(uint8_t data)
{
	/* Start transmission */
	SPDR = data;
  66:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
  68:	0d b4       	in	r0, 0x2d	; 45
  6a:	07 fe       	sbrs	r0, 7
  6c:	fd cf       	rjmp	.-6      	; 0x68 <SPI_MasterTransmit+0x2>
}
  6e:	08 95       	ret

00000070 <ChipSelect>:

void ChipSelect(uint8_t pin, uint8_t state)
{
  70:	0f 93       	push	r16
  72:	08 2f       	mov	r16, r24
	switch (state)
  74:	61 30       	cpi	r22, 0x01	; 1
  76:	89 f4       	brne	.+34     	; 0x9a <ChipSelect+0x2a>
	{
		/* Sink */
		case ACTIVE:
			BIT_SET(DDRB, pin);
  78:	e5 b1       	in	r30, 0x05	; 5
  7a:	21 e0       	ldi	r18, 0x01	; 1
  7c:	30 e0       	ldi	r19, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	50 e0       	ldi	r21, 0x00	; 0
  82:	60 e0       	ldi	r22, 0x00	; 0
  84:	70 e0       	ldi	r23, 0x00	; 0
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	a3 d0       	rcall	.+326    	; 0x1d2 <__ashldi3>
  8c:	e2 2b       	or	r30, r18
  8e:	e5 b9       	out	0x05, r30	; 5
			BIT_CLEAR(PORTB, pin);
  90:	86 b1       	in	r24, 0x06	; 6
  92:	20 95       	com	r18
  94:	28 23       	and	r18, r24
  96:	26 b9       	out	0x06, r18	; 6
			break;
  98:	0d c0       	rjmp	.+26     	; 0xb4 <ChipSelect+0x44>
		/* High-Z */
		case INACTIVE:
		default:
			BIT_CLEAR(DDRB, pin);
  9a:	e5 b1       	in	r30, 0x05	; 5
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	50 e0       	ldi	r21, 0x00	; 0
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	92 d0       	rcall	.+292    	; 0x1d2 <__ashldi3>
  ae:	20 95       	com	r18
  b0:	e2 23       	and	r30, r18
  b2:	e5 b9       	out	0x05, r30	; 5
			break;
	}
}
  b4:	0f 91       	pop	r16
  b6:	08 95       	ret

000000b8 <DAC_Set>:

void DAC_Set(uint8_t channel, uint16_t data)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
	/* Mask data */
	data &= 0x0fff;
  bc:	eb 01       	movw	r28, r22
  be:	df 70       	andi	r29, 0x0F	; 15
	 * bit 15: Select channel
	 * bit 14: Bypass input buffer
	 * bit 13: Output gain = 1
	 * bit 12: /SHDN bit
	 */
	data |= (0x3000 + (channel << 15));
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	99 27       	eor	r25, r25
  c4:	86 95       	lsr	r24
  c6:	97 95       	ror	r25
  c8:	88 27       	eor	r24, r24
  ca:	90 5d       	subi	r25, 0xD0	; 208
  cc:	c8 2b       	or	r28, r24
  ce:	d9 2b       	or	r29, r25

	/* Transmit data */
	ChipSelect(CS_DAC, ACTIVE);
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	cd df       	rcall	.-102    	; 0x70 <ChipSelect>
	SPI_MasterTransmit(data >> 8);		// high byte
  d6:	8d 2f       	mov	r24, r29
  d8:	c6 df       	rcall	.-116    	; 0x66 <SPI_MasterTransmit>
	SPI_MasterTransmit(data & 0x00ff);	// low byte
  da:	8c 2f       	mov	r24, r28
  dc:	c4 df       	rcall	.-120    	; 0x66 <SPI_MasterTransmit>
	ChipSelect(CS_DAC, INACTIVE);
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	c6 df       	rcall	.-116    	; 0x70 <ChipSelect>
}
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <ADC_Read>:

uint16_t ADC_Read(uint8_t channel)
{
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
	uint16_t data = 0;
	uint8_t dataOut = 0xd0 + (channel << 5);
  ee:	82 95       	swap	r24
  f0:	88 0f       	add	r24, r24
  f2:	80 7e       	andi	r24, 0xE0	; 224
  f4:	c0 ed       	ldi	r28, 0xD0	; 208
  f6:	c8 0f       	add	r28, r24

	ChipSelect(CS_ADC, ACTIVE);
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	b9 df       	rcall	.-142    	; 0x70 <ChipSelect>
	SPI_MasterTransmit(dataOut);
  fe:	8c 2f       	mov	r24, r28
 100:	b2 df       	rcall	.-156    	; 0x66 <SPI_MasterTransmit>
	data = SPDR << 8;
 102:	8e b5       	in	r24, 0x2e	; 46
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	c9 2f       	mov	r28, r25
 108:	d8 2f       	mov	r29, r24
	SPI_MasterTransmit(0x00);
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	ac df       	rcall	.-168    	; 0x66 <SPI_MasterTransmit>
	data |= SPDR;
 10e:	8e b5       	in	r24, 0x2e	; 46
 110:	c8 2b       	or	r28, r24
	ChipSelect(CS_ADC, INACTIVE);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	ac df       	rcall	.-168    	; 0x70 <ChipSelect>

	return data;
}
 118:	ce 01       	movw	r24, r28
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <DisplayEnablePulse>:
	DisplayEnablePulse();
}

void DisplayEnablePulse()
{
	BIT_SET(DISPLAY_CTL, DISPLAY_EN);
 120:	82 b1       	in	r24, 0x02	; 2
 122:	84 60       	ori	r24, 0x04	; 4
 124:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	8a 95       	dec	r24
 12a:	f1 f7       	brne	.-4      	; 0x128 <DisplayEnablePulse+0x8>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <DisplayEnablePulse+0xe>
	_delay_us(1);
	BIT_CLEAR(DISPLAY_CTL, DISPLAY_EN);
 12e:	82 b1       	in	r24, 0x02	; 2
 130:	8b 7f       	andi	r24, 0xFB	; 251
 132:	82 b9       	out	0x02, r24	; 2
 134:	87 ec       	ldi	r24, 0xC7	; 199
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <DisplayEnablePulse+0x18>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <DisplayEnablePulse+0x1e>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <DisplayInit>:

	return data;
}

void DisplayInit()
{
 142:	cf 93       	push	r28
	BIT_CLEAR(DISPLAY_CTL, DISPLAY_RW);
 144:	82 b1       	in	r24, 0x02	; 2
 146:	8d 7f       	andi	r24, 0xFD	; 253
 148:	82 b9       	out	0x02, r24	; 2
	BIT_CLEAR(DISPLAY_CTL, DISPLAY_RS);
 14a:	82 b1       	in	r24, 0x02	; 2
 14c:	8e 7f       	andi	r24, 0xFE	; 254
 14e:	82 b9       	out	0x02, r24	; 2
	BIT_CLEAR(DISPLAY_CTL, DISPLAY_EN);
 150:	82 b1       	in	r24, 0x02	; 2
 152:	8b 7f       	andi	r24, 0xFB	; 251
 154:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	8f e2       	ldi	r24, 0x2F	; 47
 158:	95 e7       	ldi	r25, 0x75	; 117
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <DisplayInit+0x18>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <DisplayInit+0x1e>
 160:	00 00       	nop
	 * bit 4: Data bus length = 8
	 * bit 3: Number of lines = 2
	 * bit 2: font size = 5x8
	 */
	_delay_ms(15);
	DISPLAY_DATA = 0b00111000;
 162:	c8 e3       	ldi	r28, 0x38	; 56
 164:	ca b9       	out	0x0a, r28	; 10
	DisplayEnablePulse();
 166:	dc df       	rcall	.-72     	; 0x120 <DisplayEnablePulse>
 168:	8f e0       	ldi	r24, 0x0F	; 15
 16a:	97 e2       	ldi	r25, 0x27	; 39
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <DisplayInit+0x2a>
 170:	00 c0       	rjmp	.+0      	; 0x172 <DisplayInit+0x30>
 172:	00 00       	nop

	_delay_ms(5);
	DISPLAY_DATA = 0b00111000;
 174:	ca b9       	out	0x0a, r28	; 10
	DisplayEnablePulse();
 176:	d4 df       	rcall	.-88     	; 0x120 <DisplayEnablePulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	87 ec       	ldi	r24, 0xC7	; 199
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <DisplayInit+0x3a>
 180:	00 c0       	rjmp	.+0      	; 0x182 <DisplayInit+0x40>
 182:	00 00       	nop

	_delay_us(100);
	DISPLAY_DATA = 0b00111000;
 184:	ca b9       	out	0x0a, r28	; 10
	DisplayEnablePulse();
 186:	cc df       	rcall	.-104    	; 0x120 <DisplayEnablePulse>
	 * Display on
	 * bit 2: Display on
	 * bit 1: Cursor
	 * bit 0: Cursor position
	 */
	DISPLAY_DATA = 0b00001100;
 188:	8c e0       	ldi	r24, 0x0C	; 12
 18a:	8a b9       	out	0x0a, r24	; 10
	DisplayEnablePulse();
 18c:	c9 df       	rcall	.-110    	; 0x120 <DisplayEnablePulse>
	/*
	 * Entry mode set
	 * bit 1: Direction
	 * bit 0: Display shift
	 */
	DISPLAY_DATA = 0b00000111;
 18e:	87 e0       	ldi	r24, 0x07	; 7
 190:	8a b9       	out	0x0a, r24	; 10
	DisplayEnablePulse();
 192:	c6 df       	rcall	.-116    	; 0x120 <DisplayEnablePulse>

	/* Display clear */
	DISPLAY_DATA = 0b00000001;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	8a b9       	out	0x0a, r24	; 10
	DisplayEnablePulse();
 198:	c3 df       	rcall	.-122    	; 0x120 <DisplayEnablePulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	8f e9       	ldi	r24, 0x9F	; 159
 19c:	9f e0       	ldi	r25, 0x0F	; 15
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <DisplayInit+0x5c>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <DisplayInit+0x62>
 1a4:	00 00       	nop
	_delay_ms(2);
}
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <main>:
	uint16_t setCurrent = 0;		// Set current in mA
	uint16_t measuredVoltage = 0;	// Measured voltage in mV
	uint16_t measuredCurrent = 0;	// Measured current in mA
	
	/* f clock -> 8 MHz */
	ClockPrescalerSet1();
 1aa:	4d df       	rcall	.-358    	; 0x46 <ClockPrescalerSet1>

	/* Initialize IO */
	IOInit();
 1ac:	51 df       	rcall	.-350    	; 0x50 <IOInit>

	/* Initialize SPI */
	SPI_MasterInit();
 1ae:	56 df       	rcall	.-340    	; 0x5c <SPI_MasterInit>

	/* Initialize Display */
	DisplayInit();
 1b0:	c8 df       	rcall	.-112    	; 0x142 <DisplayInit>
		// TODO setting voltage/current with rotary encoders
		setVoltage = 20000;
		setCurrent = 2000;
		
		/* Set voltage */
		DAC_Set(DAC_VOLTAGE, setVoltage / 5);
 1b2:	60 ea       	ldi	r22, 0xA0	; 160
 1b4:	7f e0       	ldi	r23, 0x0F	; 15
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	7f df       	rcall	.-258    	; 0xb8 <DAC_Set>
		
		/* Set current */
		DAC_Set(DAC_CURRENT, setCurrent << 1);
 1ba:	60 ea       	ldi	r22, 0xA0	; 160
 1bc:	7f e0       	ldi	r23, 0x0F	; 15
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	7b df       	rcall	.-266    	; 0xb8 <DAC_Set>
		
		/*
		 * Measure voltage
		 * 12-bit resolution measures voltage in steps of 5 mV
		 */
		measuredVoltage = ADC_Read(ADC_VOLTAGE) * 5;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	92 df       	rcall	.-220    	; 0xea <ADC_Read>
		/*
		 * Measure current
		 * 12-bit resolution measures current in steps of 0.5 mA
		 * only 11 bits are used -> steps of 1 mA
		 */
		measuredCurrent = ADC_Read(ADC_CURRENT) >> 1;
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 df       	rcall	.-224    	; 0xea <ADC_Read>
		
		/* Update the LCD display */
		// DisplayUpdate(setVoltage, measuredVoltage, setCurrent, measuredCurrent);
		
		PUEA = 7;
 1ca:	87 e0       	ldi	r24, 0x07	; 7
 1cc:	83 b9       	out	0x03, r24	; 3
		PORTA = 7;
 1ce:	82 b9       	out	0x02, r24	; 2
 1d0:	f0 cf       	rjmp	.-32     	; 0x1b2 <main+0x8>

000001d2 <__ashldi3>:
 1d2:	0f 93       	push	r16
 1d4:	08 30       	cpi	r16, 0x08	; 8
 1d6:	90 f0       	brcs	.+36     	; 0x1fc <__ashldi3+0x2a>
 1d8:	98 2f       	mov	r25, r24
 1da:	87 2f       	mov	r24, r23
 1dc:	76 2f       	mov	r23, r22
 1de:	65 2f       	mov	r22, r21
 1e0:	54 2f       	mov	r21, r20
 1e2:	43 2f       	mov	r20, r19
 1e4:	32 2f       	mov	r19, r18
 1e6:	22 27       	eor	r18, r18
 1e8:	08 50       	subi	r16, 0x08	; 8
 1ea:	f4 cf       	rjmp	.-24     	; 0x1d4 <__ashldi3+0x2>
 1ec:	22 0f       	add	r18, r18
 1ee:	33 1f       	adc	r19, r19
 1f0:	44 1f       	adc	r20, r20
 1f2:	55 1f       	adc	r21, r21
 1f4:	66 1f       	adc	r22, r22
 1f6:	77 1f       	adc	r23, r23
 1f8:	88 1f       	adc	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	0a 95       	dec	r16
 1fe:	b2 f7       	brpl	.-20     	; 0x1ec <__ashldi3+0x1a>
 200:	0f 91       	pop	r16
 202:	08 95       	ret

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
