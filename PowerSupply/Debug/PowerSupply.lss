
PowerSupply.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bb2  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d5  00000000  00000000  00000e06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000430  00000000  00000000  000015db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000144  00000000  00000000  00001a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000492  00000000  00000000  00001b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003e4  00000000  00000000  00001fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000023c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	3b d0       	rcall	.+118    	; 0xb8 <main>
  42:	69 c0       	rjmp	.+210    	; 0x116 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <ClockPrescalerSet1>:
    }
}

void ClockPrescalerSet1()
{
	CCP = 0xd8;
  46:	88 ed       	ldi	r24, 0xD8	; 216
  48:	86 bf       	out	0x36, r24	; 54
	CLKPR = 0b00000000;
  4a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fe061>
  4e:	08 95       	ret

00000050 <IOInit>:
}

void IOInit()
{
	DDRA = 0x07;
  50:	87 e0       	ldi	r24, 0x07	; 7
  52:	81 b9       	out	0x01, r24	; 1
	DDRB = 0x00; // CS lijnen uitzoeken
  54:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xff;
  56:	8f ef       	ldi	r24, 0xFF	; 255
  58:	89 b9       	out	0x09, r24	; 9
  5a:	08 95       	ret

0000005c <SPI_MasterInit>:
}

void SPI_MasterInit()
{
	/* MOSI and SCK -> output, RST and MISO -> input */
	DDRD = 0b00001001;
  5c:	89 e0       	ldi	r24, 0x09	; 9
  5e:	8d b9       	out	0x0d, r24	; 13
	/* Enable SPI, Master, clock -> 500 KHz */
	SPCR = 0b01010001;
  60:	81 e5       	ldi	r24, 0x51	; 81
  62:	8c bd       	out	0x2c, r24	; 44
  64:	08 95       	ret

00000066 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(uint8_t data)
{
	/* Start transmission */
	SPDR = data;
  66:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
  68:	0d b4       	in	r0, 0x2d	; 45
  6a:	07 fe       	sbrs	r0, 7
  6c:	fd cf       	rjmp	.-6      	; 0x68 <SPI_MasterTransmit+0x2>
}
  6e:	08 95       	ret

00000070 <ChipSelect>:

void ChipSelect(uint8_t pin, uint8_t state)
{
  70:	0f 93       	push	r16
  72:	08 2f       	mov	r16, r24
	switch (state)
  74:	61 30       	cpi	r22, 0x01	; 1
  76:	89 f4       	brne	.+34     	; 0x9a <ChipSelect+0x2a>
	{
		case ACTIVE:
			BIT_SET(DDRB, pin);
  78:	e5 b1       	in	r30, 0x05	; 5
  7a:	21 e0       	ldi	r18, 0x01	; 1
  7c:	30 e0       	ldi	r19, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	50 e0       	ldi	r21, 0x00	; 0
  82:	60 e0       	ldi	r22, 0x00	; 0
  84:	70 e0       	ldi	r23, 0x00	; 0
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	2c d0       	rcall	.+88     	; 0xe4 <__ashldi3>
  8c:	e2 2b       	or	r30, r18
  8e:	e5 b9       	out	0x05, r30	; 5
			BIT_CLEAR(PORTB, pin);
  90:	86 b1       	in	r24, 0x06	; 6
  92:	20 95       	com	r18
  94:	28 23       	and	r18, r24
  96:	26 b9       	out	0x06, r18	; 6
			break;
  98:	0d c0       	rjmp	.+26     	; 0xb4 <ChipSelect+0x44>
		case INACTIVE:
		default:
			BIT_CLEAR(DDRB, pin);
  9a:	e5 b1       	in	r30, 0x05	; 5
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	50 e0       	ldi	r21, 0x00	; 0
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	1b d0       	rcall	.+54     	; 0xe4 <__ashldi3>
  ae:	20 95       	com	r18
  b0:	e2 23       	and	r30, r18
  b2:	e5 b9       	out	0x05, r30	; 5
			break;
	}
}
  b4:	0f 91       	pop	r16
  b6:	08 95       	ret

000000b8 <main>:

/* main */
int main(void)
{
	/* f clock -> 8 MHz */
	ClockPrescalerSet1();
  b8:	c6 df       	rcall	.-116    	; 0x46 <ClockPrescalerSet1>
	
	/* Initialize IO */
	IOInit();
  ba:	ca df       	rcall	.-108    	; 0x50 <IOInit>
	
	/* Initialize SPI */
	SPI_MasterInit();
  bc:	cf df       	rcall	.-98     	; 0x5c <SPI_MasterInit>
			
    while (1) 
    {
		ChipSelect(CS_ADC, ACTIVE);
  be:	61 e0       	ldi	r22, 0x01	; 1
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	d6 df       	rcall	.-84     	; 0x70 <ChipSelect>
		SPI_MasterTransmit('B');
  c4:	82 e4       	ldi	r24, 0x42	; 66
  c6:	cf df       	rcall	.-98     	; 0x66 <SPI_MasterTransmit>
		SPI_MasterTransmit('i');
  c8:	89 e6       	ldi	r24, 0x69	; 105
  ca:	cd df       	rcall	.-102    	; 0x66 <SPI_MasterTransmit>
		SPI_MasterTransmit('b');
  cc:	82 e6       	ldi	r24, 0x62	; 98
  ce:	cb df       	rcall	.-106    	; 0x66 <SPI_MasterTransmit>
		SPI_MasterTransmit('b');
  d0:	82 e6       	ldi	r24, 0x62	; 98
  d2:	c9 df       	rcall	.-110    	; 0x66 <SPI_MasterTransmit>
		SPI_MasterTransmit('l');
  d4:	8c e6       	ldi	r24, 0x6C	; 108
  d6:	c7 df       	rcall	.-114    	; 0x66 <SPI_MasterTransmit>
		SPI_MasterTransmit('e');
  d8:	85 e6       	ldi	r24, 0x65	; 101
  da:	c5 df       	rcall	.-118    	; 0x66 <SPI_MasterTransmit>
		ChipSelect(CS_ADC, INACTIVE);
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	c7 df       	rcall	.-114    	; 0x70 <ChipSelect>
  e2:	ed cf       	rjmp	.-38     	; 0xbe <main+0x6>

000000e4 <__ashldi3>:
  e4:	0f 93       	push	r16
  e6:	08 30       	cpi	r16, 0x08	; 8
  e8:	90 f0       	brcs	.+36     	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
  ea:	98 2f       	mov	r25, r24
  ec:	87 2f       	mov	r24, r23
  ee:	76 2f       	mov	r23, r22
  f0:	65 2f       	mov	r22, r21
  f2:	54 2f       	mov	r21, r20
  f4:	43 2f       	mov	r20, r19
  f6:	32 2f       	mov	r19, r18
  f8:	22 27       	eor	r18, r18
  fa:	08 50       	subi	r16, 0x08	; 8
  fc:	f4 cf       	rjmp	.-24     	; 0xe6 <__ashldi3+0x2>
  fe:	22 0f       	add	r18, r18
 100:	33 1f       	adc	r19, r19
 102:	44 1f       	adc	r20, r20
 104:	55 1f       	adc	r21, r21
 106:	66 1f       	adc	r22, r22
 108:	77 1f       	adc	r23, r23
 10a:	88 1f       	adc	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	0a 95       	dec	r16
 110:	b2 f7       	brpl	.-20     	; 0xfe <__ashldi3+0x1a>
 112:	0f 91       	pop	r16
 114:	08 95       	ret

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
