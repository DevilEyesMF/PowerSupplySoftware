
PowerSupply.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000522  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  00000522  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000522  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001089  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000931  00000000  00000000  000016b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000762  00000000  00000000  00001fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00002744  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000599  00000000  00000000  00002910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000844  00000000  00000000  00002ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000036ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	20 c0       	rjmp	.+64     	; 0x42 <__ctors_end>
   2:	2f c0       	rjmp	.+94     	; 0x62 <__bad_interrupt>
   4:	2e c0       	rjmp	.+92     	; 0x62 <__bad_interrupt>
   6:	2d c0       	rjmp	.+90     	; 0x62 <__bad_interrupt>
   8:	a5 c1       	rjmp	.+842    	; 0x354 <__vector_4>
   a:	2b c0       	rjmp	.+86     	; 0x62 <__bad_interrupt>
   c:	2a c0       	rjmp	.+84     	; 0x62 <__bad_interrupt>
   e:	29 c0       	rjmp	.+82     	; 0x62 <__bad_interrupt>
  10:	28 c0       	rjmp	.+80     	; 0x62 <__bad_interrupt>
  12:	27 c0       	rjmp	.+78     	; 0x62 <__bad_interrupt>
  14:	26 c0       	rjmp	.+76     	; 0x62 <__bad_interrupt>
  16:	25 c0       	rjmp	.+74     	; 0x62 <__bad_interrupt>
  18:	24 c0       	rjmp	.+72     	; 0x62 <__bad_interrupt>
  1a:	23 c0       	rjmp	.+70     	; 0x62 <__bad_interrupt>
  1c:	22 c0       	rjmp	.+68     	; 0x62 <__bad_interrupt>
  1e:	21 c0       	rjmp	.+66     	; 0x62 <__bad_interrupt>
  20:	20 c0       	rjmp	.+64     	; 0x62 <__bad_interrupt>
  22:	1f c0       	rjmp	.+62     	; 0x62 <__bad_interrupt>
  24:	1e c0       	rjmp	.+60     	; 0x62 <__bad_interrupt>
  26:	1d c0       	rjmp	.+58     	; 0x62 <__bad_interrupt>
  28:	1c c0       	rjmp	.+56     	; 0x62 <__bad_interrupt>
  2a:	1b c0       	rjmp	.+54     	; 0x62 <__bad_interrupt>
  2c:	1a c0       	rjmp	.+52     	; 0x62 <__bad_interrupt>
  2e:	19 c0       	rjmp	.+50     	; 0x62 <__bad_interrupt>
  30:	18 c0       	rjmp	.+48     	; 0x62 <__bad_interrupt>
  32:	17 c0       	rjmp	.+46     	; 0x62 <__bad_interrupt>
  34:	b2 c1       	rjmp	.+868    	; 0x39a <__vector_4+0x46>
  36:	bd c1       	rjmp	.+890    	; 0x3b2 <__vector_4+0x5e>
  38:	c2 c1       	rjmp	.+900    	; 0x3be <__vector_4+0x6a>
  3a:	c8 c1       	rjmp	.+912    	; 0x3cc <__vector_4+0x78>
  3c:	e0 c1       	rjmp	.+960    	; 0x3fe <__vector_4+0xaa>
  3e:	e5 c1       	rjmp	.+970    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
  40:	ea c1       	rjmp	.+980    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>

00000042 <__ctors_end>:
  42:	11 24       	eor	r1, r1
  44:	1f be       	out	0x3f, r1	; 63
  46:	cf ef       	ldi	r28, 0xFF	; 255
  48:	d2 e0       	ldi	r29, 0x02	; 2
  4a:	de bf       	out	0x3e, r29	; 62
  4c:	cd bf       	out	0x3d, r28	; 61

0000004e <__do_clear_bss>:
  4e:	21 e0       	ldi	r18, 0x01	; 1
  50:	a0 e0       	ldi	r26, 0x00	; 0
  52:	b1 e0       	ldi	r27, 0x01	; 1
  54:	01 c0       	rjmp	.+2      	; 0x58 <.do_clear_bss_start>

00000056 <.do_clear_bss_loop>:
  56:	1d 92       	st	X+, r1

00000058 <.do_clear_bss_start>:
  58:	a9 30       	cpi	r26, 0x09	; 9
  5a:	b2 07       	cpc	r27, r18
  5c:	e1 f7       	brne	.-8      	; 0x56 <.do_clear_bss_loop>
  5e:	42 d1       	rcall	.+644    	; 0x2e4 <main>
  60:	24 c2       	rjmp	.+1096   	; 0x4aa <_exit>

00000062 <__bad_interrupt>:
  62:	ce cf       	rjmp	.-100    	; 0x0 <__vectors>

00000064 <ClockPrescalerSet1>:
	SPI_MasterTransmit(0x00);
	data |= SPDR;
	ChipSelect(CS_ADC, INACTIVE);

	return data;
}
  64:	88 ed       	ldi	r24, 0xD8	; 216
  66:	86 bf       	out	0x36, r24	; 54
  68:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fe061>
  6c:	08 95       	ret

0000006e <IOInit>:
  6e:	87 e0       	ldi	r24, 0x07	; 7
  70:	81 b9       	out	0x01, r24	; 1
  72:	15 b8       	out	0x05, r1	; 5
  74:	8f ef       	ldi	r24, 0xFF	; 255
  76:	89 b9       	out	0x09, r24	; 9
  78:	08 95       	ret

0000007a <SPI_MasterInit>:
  7a:	89 e0       	ldi	r24, 0x09	; 9
  7c:	8d b9       	out	0x0d, r24	; 13
  7e:	81 e5       	ldi	r24, 0x51	; 81
  80:	8c bd       	out	0x2c, r24	; 44
  82:	08 95       	ret

00000084 <DisplayEnablePulse>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	8d e0       	ldi	r24, 0x0D	; 13
  86:	8a 95       	dec	r24
  88:	f1 f7       	brne	.-4      	; 0x86 <DisplayEnablePulse+0x2>
  8a:	00 00       	nop
}

void DisplayEnablePulse()
{
	_delay_us(5);
	BIT_SET(DISPLAY_CTL, DISPLAY_EN);
  8c:	86 b1       	in	r24, 0x06	; 6
  8e:	82 60       	ori	r24, 0x02	; 2
  90:	86 b9       	out	0x06, r24	; 6
  92:	8d e0       	ldi	r24, 0x0D	; 13
  94:	8a 95       	dec	r24
  96:	f1 f7       	brne	.-4      	; 0x94 <DisplayEnablePulse+0x10>
  98:	00 00       	nop
	_delay_us(5);
	BIT_CLEAR(DISPLAY_CTL, DISPLAY_EN);
  9a:	86 b1       	in	r24, 0x06	; 6
  9c:	8d 7f       	andi	r24, 0xFD	; 253
  9e:	86 b9       	out	0x06, r24	; 6
  a0:	8a e6       	ldi	r24, 0x6A	; 106
  a2:	8a 95       	dec	r24
  a4:	f1 f7       	brne	.-4      	; 0xa2 <DisplayEnablePulse+0x1e>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <DisplayEnablePulse+0x24>
  a8:	08 95       	ret

000000aa <DisplayInit>:

	return data;
}

void DisplayInit()
{
  aa:	cf 93       	push	r28
	//BIT_CLEAR(DISPLAY_CTL, DISPLAY_RW);
	BIT_CLEAR(DISPLAY_CTL, DISPLAY_RS);
  ac:	86 b1       	in	r24, 0x06	; 6
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	86 b9       	out	0x06, r24	; 6
	BIT_CLEAR(DISPLAY_CTL, DISPLAY_EN);
  b2:	86 b1       	in	r24, 0x06	; 6
  b4:	8d 7f       	andi	r24, 0xFD	; 253
  b6:	86 b9       	out	0x06, r24	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	8f e2       	ldi	r24, 0x2F	; 47
  ba:	95 e7       	ldi	r25, 0x75	; 117
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <DisplayInit+0x12>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <DisplayInit+0x18>
  c2:	00 00       	nop
	 * bit 4: Data bus length = 8
	 * bit 3: Number of lines = 2
	 * bit 2: font size = 5x8
	 */
	_delay_ms(15);
	DISPLAY_DATA = 0b00111000;
  c4:	c8 e3       	ldi	r28, 0x38	; 56
  c6:	ca b9       	out	0x0a, r28	; 10
	DisplayEnablePulse();
  c8:	dd df       	rcall	.-70     	; 0x84 <DisplayEnablePulse>
  ca:	8f e0       	ldi	r24, 0x0F	; 15
  cc:	97 e2       	ldi	r25, 0x27	; 39
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <DisplayInit+0x24>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <DisplayInit+0x2a>
  d4:	00 00       	nop

	_delay_ms(5);
	DISPLAY_DATA = 0b00111000;
  d6:	ca b9       	out	0x0a, r28	; 10
	DisplayEnablePulse();
  d8:	d5 df       	rcall	.-86     	; 0x84 <DisplayEnablePulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	87 ec       	ldi	r24, 0xC7	; 199
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <DisplayInit+0x34>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <DisplayInit+0x3a>
  e4:	00 00       	nop

	_delay_us(100);
	DISPLAY_DATA = 0b00111000;
  e6:	ca b9       	out	0x0a, r28	; 10
	DisplayEnablePulse();
  e8:	cd df       	rcall	.-102    	; 0x84 <DisplayEnablePulse>
	 * Display on
	 * bit 2: Display on
	 * bit 1: Cursor
	 * bit 0: Cursor position
	 */
	DISPLAY_DATA = 0b00001101;
  ea:	8d e0       	ldi	r24, 0x0D	; 13
  ec:	8a b9       	out	0x0a, r24	; 10
	DisplayEnablePulse();
  ee:	ca df       	rcall	.-108    	; 0x84 <DisplayEnablePulse>
	/*
	 * Entry mode set
	 * bit 1: Direction
	 * bit 0: Display shift
	 */
	DISPLAY_DATA = 0b00000100;
  f0:	84 e0       	ldi	r24, 0x04	; 4
  f2:	8a b9       	out	0x0a, r24	; 10
	DisplayEnablePulse();
  f4:	c7 df       	rcall	.-114    	; 0x84 <DisplayEnablePulse>

	/* Display clear */
	DISPLAY_DATA = 0b00000001;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	8a b9       	out	0x0a, r24	; 10
	DisplayEnablePulse();
  fa:	c4 df       	rcall	.-120    	; 0x84 <DisplayEnablePulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	8f e9       	ldi	r24, 0x9F	; 159
  fe:	9f e0       	ldi	r25, 0x0F	; 15
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <__EEPROM_REGION_LENGTH__>
 104:	00 c0       	rjmp	.+0      	; 0x106 <__EEPROM_REGION_LENGTH__+0x6>
 106:	00 00       	nop
	_delay_ms(2);
}
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <DisplaySetDDRAM>:
	DisplayWriteChar('A');
}

void DisplaySetDDRAM(uint8_t addressRAM)
{
	BIT_CLEAR(DISPLAY_CTL, DISPLAY_RS);
 10c:	96 b1       	in	r25, 0x06	; 6
 10e:	9e 7f       	andi	r25, 0xFE	; 254
 110:	96 b9       	out	0x06, r25	; 6

	DISPLAY_DATA = addressRAM | 0b10000000;
 112:	80 68       	ori	r24, 0x80	; 128
 114:	8a b9       	out	0x0a, r24	; 10
	DisplayEnablePulse();
 116:	b6 df       	rcall	.-148    	; 0x84 <DisplayEnablePulse>
 118:	08 95       	ret

0000011a <DisplayWriteChar>:
}

void DisplayWriteChar(char c)
{
	BIT_SET(DISPLAY_CTL, DISPLAY_RS);
 11a:	96 b1       	in	r25, 0x06	; 6
 11c:	91 60       	ori	r25, 0x01	; 1
 11e:	96 b9       	out	0x06, r25	; 6

	DISPLAY_DATA = c;
 120:	8a b9       	out	0x0a, r24	; 10
	DisplayEnablePulse();
 122:	b0 df       	rcall	.-160    	; 0x84 <DisplayEnablePulse>
 124:	08 95       	ret

00000126 <IntegerToASCII>:
	BIT_CLEAR(DISPLAY_CTL, DISPLAY_EN);
	_delay_us(40);
}

void IntegerToASCII(uint16_t number, char *c_number)
{
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	e8 2f       	mov	r30, r24
 134:	49 2f       	mov	r20, r25
 136:	7b 01       	movw	r14, r22
	/* Separate the digits */
    for (int i = 0, j = 10000; i < 5; i++, j/=10)
 138:	c0 e1       	ldi	r28, 0x10	; 16
 13a:	d7 e2       	ldi	r29, 0x27	; 39
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	13 c0       	rjmp	.+38     	; 0x168 <IntegerToASCII+0x42>
    {
	    c_number[i] = number / j + 0x30; // + 0x30 to convert to ASCII
 142:	87 01       	movw	r16, r14
 144:	02 0f       	add	r16, r18
 146:	13 1f       	adc	r17, r19
 148:	8e 2f       	mov	r24, r30
 14a:	94 2f       	mov	r25, r20
 14c:	be 01       	movw	r22, r28
 14e:	86 d1       	rcall	.+780    	; 0x45c <__udivmodhi4>
 150:	60 5d       	subi	r22, 0xD0	; 208
 152:	f8 01       	movw	r30, r16
 154:	60 83       	st	Z, r22
	    number %= j;
 156:	e8 2f       	mov	r30, r24
 158:	49 2f       	mov	r20, r25
}

void IntegerToASCII(uint16_t number, char *c_number)
{
	/* Separate the digits */
    for (int i = 0, j = 10000; i < 5; i++, j/=10)
 15a:	2f 5f       	subi	r18, 0xFF	; 255
 15c:	3f 4f       	sbci	r19, 0xFF	; 255
 15e:	ce 01       	movw	r24, r28
 160:	6a e0       	ldi	r22, 0x0A	; 10
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	8f d1       	rcall	.+798    	; 0x484 <__divmodhi4>
 166:	eb 01       	movw	r28, r22
 168:	25 30       	cpi	r18, 0x05	; 5
 16a:	31 05       	cpc	r19, r1
 16c:	54 f3       	brlt	.-44     	; 0x142 <IntegerToASCII+0x1c>
    {
	    c_number[i] = number / j + 0x30; // + 0x30 to convert to ASCII
	    number %= j;
    }
}
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	ff 90       	pop	r15
 178:	ef 90       	pop	r14
 17a:	08 95       	ret

0000017c <FormatValue>:

void FormatValue(char c[6])
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	dc 01       	movw	r26, r24
	/* Swap first zero with space if needed */
	if (c[0] == '0')
 182:	8c 91       	ld	r24, X
 184:	80 33       	cpi	r24, 0x30	; 48
 186:	11 f4       	brne	.+4      	; 0x18c <FormatValue+0x10>
	{
		c[0] = ' ';
 188:	80 e2       	ldi	r24, 0x20	; 32
 18a:	8c 93       	st	X, r24
	    number %= j;
    }
}

void FormatValue(char c[6])
{
 18c:	25 e0       	ldi	r18, 0x05	; 5
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	09 c0       	rjmp	.+18     	; 0x1a4 <FormatValue+0x28>
		c[0] = ' ';
	}

	for (int i = 5; i > 2; i--)
	{
		c[i] = c[i-1];
 192:	fd 01       	movw	r30, r26
 194:	e2 0f       	add	r30, r18
 196:	f3 1f       	adc	r31, r19
 198:	ef 01       	movw	r28, r30
 19a:	21 97       	sbiw	r28, 0x01	; 1
 19c:	88 81       	ld	r24, Y
 19e:	80 83       	st	Z, r24
	if (c[0] == '0')
	{
		c[0] = ' ';
	}

	for (int i = 5; i > 2; i--)
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	31 09       	sbc	r19, r1
 1a4:	23 30       	cpi	r18, 0x03	; 3
 1a6:	31 05       	cpc	r19, r1
 1a8:	a4 f7       	brge	.-24     	; 0x192 <FormatValue+0x16>
	{
		c[i] = c[i-1];
	}

	c[2] = ',';
 1aa:	8c e2       	ldi	r24, 0x2C	; 44
 1ac:	12 96       	adiw	r26, 0x02	; 2
 1ae:	8c 93       	st	X, r24
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <DisplayUpdate>:
	DisplayEnablePulse();
	_delay_ms(2);
}

void DisplayUpdate(uint16_t setVoltage, uint16_t measuredVoltage, uint16_t setCurrent, uint16_t measuredCurrent)
{
 1b6:	cf 92       	push	r12
 1b8:	df 92       	push	r13
 1ba:	ef 92       	push	r14
 1bc:	ff 92       	push	r15
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
 1ca:	68 97       	sbiw	r28, 0x18	; 24
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	f8 94       	cli
 1d0:	de bf       	out	0x3e, r29	; 62
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	cd bf       	out	0x3d, r28	; 61
 1d6:	6b 01       	movw	r12, r22
 1d8:	7a 01       	movw	r14, r20
 1da:	89 01       	movw	r16, r18
	/* Declare local char arrays for ASCII codes */
	char c_setVoltage[6], c_measuredVoltage[6], c_setCurrent[6], c_measuredCurrent[6];

	/* Transform values to ASCII */
	IntegerToASCII(setVoltage, c_setVoltage);
 1dc:	be 01       	movw	r22, r28
 1de:	6f 5f       	subi	r22, 0xFF	; 255
 1e0:	7f 4f       	sbci	r23, 0xFF	; 255
 1e2:	a1 df       	rcall	.-190    	; 0x126 <IntegerToASCII>
	IntegerToASCII(measuredVoltage, c_measuredVoltage);
 1e4:	be 01       	movw	r22, r28
 1e6:	69 5f       	subi	r22, 0xF9	; 249
 1e8:	7f 4f       	sbci	r23, 0xFF	; 255
 1ea:	c6 01       	movw	r24, r12
 1ec:	9c df       	rcall	.-200    	; 0x126 <IntegerToASCII>
	IntegerToASCII(setCurrent, c_setCurrent);
 1ee:	be 01       	movw	r22, r28
 1f0:	63 5f       	subi	r22, 0xF3	; 243
 1f2:	7f 4f       	sbci	r23, 0xFF	; 255
 1f4:	c7 01       	movw	r24, r14
 1f6:	97 df       	rcall	.-210    	; 0x126 <IntegerToASCII>
	IntegerToASCII(measuredCurrent, c_measuredCurrent);
 1f8:	be 01       	movw	r22, r28
 1fa:	6d 5e       	subi	r22, 0xED	; 237
 1fc:	7f 4f       	sbci	r23, 0xFF	; 255
 1fe:	c8 01       	movw	r24, r16
 200:	92 df       	rcall	.-220    	; 0x126 <IntegerToASCII>

	/* Format the strings for the LCD */
	FormatValue(c_setVoltage);
 202:	ce 01       	movw	r24, r28
 204:	01 96       	adiw	r24, 0x01	; 1
 206:	ba df       	rcall	.-140    	; 0x17c <FormatValue>
	FormatValue(c_measuredVoltage);
 208:	ce 01       	movw	r24, r28
 20a:	07 96       	adiw	r24, 0x07	; 7
 20c:	b7 df       	rcall	.-146    	; 0x17c <FormatValue>
	FormatValue(c_setCurrent);
 20e:	ce 01       	movw	r24, r28
 210:	0d 96       	adiw	r24, 0x0d	; 13
 212:	b4 df       	rcall	.-152    	; 0x17c <FormatValue>
	FormatValue(c_measuredCurrent);
 214:	ce 01       	movw	r24, r28
 216:	43 96       	adiw	r24, 0x13	; 19
 218:	b1 df       	rcall	.-158    	; 0x17c <FormatValue>
	
	BIT_CLEAR(DISPLAY_CTL, DISPLAY_RS);
 21a:	86 b1       	in	r24, 0x06	; 6
 21c:	8e 7f       	andi	r24, 0xFE	; 254
 21e:	86 b9       	out	0x06, r24	; 6
	DISPLAY_DATA = 0b10;
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	8a b9       	out	0x0a, r24	; 10
	DisplayEnablePulse();
 224:	2f df       	rcall	.-418    	; 0x84 <DisplayEnablePulse>

	/* Print set voltage */
	DisplaySetDDRAM(ADDR_VOLTAGE_SET);
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	71 df       	rcall	.-286    	; 0x10c <DisplaySetDDRAM>

	for (int i = 0; i < 6; i++)
 22a:	00 e0       	ldi	r16, 0x00	; 0
 22c:	10 e0       	ldi	r17, 0x00	; 0
 22e:	0a c0       	rjmp	.+20     	; 0x244 <__DATA_REGION_LENGTH__+0x44>
	{
		DisplayWriteChar(c_setVoltage[i]);
 230:	e1 e0       	ldi	r30, 0x01	; 1
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	ec 0f       	add	r30, r28
 236:	fd 1f       	adc	r31, r29
 238:	e0 0f       	add	r30, r16
 23a:	f1 1f       	adc	r31, r17
 23c:	80 81       	ld	r24, Z
 23e:	6d df       	rcall	.-294    	; 0x11a <DisplayWriteChar>
	DisplayEnablePulse();

	/* Print set voltage */
	DisplaySetDDRAM(ADDR_VOLTAGE_SET);

	for (int i = 0; i < 6; i++)
 240:	0f 5f       	subi	r16, 0xFF	; 255
 242:	1f 4f       	sbci	r17, 0xFF	; 255
 244:	06 30       	cpi	r16, 0x06	; 6
 246:	11 05       	cpc	r17, r1
 248:	9c f3       	brlt	.-26     	; 0x230 <__DATA_REGION_LENGTH__+0x30>
	{
		DisplayWriteChar(c_setVoltage[i]);
	}
	DisplayWriteChar('V');
 24a:	86 e5       	ldi	r24, 0x56	; 86
 24c:	66 df       	rcall	.-308    	; 0x11a <DisplayWriteChar>

	/* Print 2 spaces */

	/* Print measured voltage */
	DisplaySetDDRAM(ADDR_VOLTAGE_MEAS);
 24e:	89 e0       	ldi	r24, 0x09	; 9
 250:	5d df       	rcall	.-326    	; 0x10c <DisplaySetDDRAM>

	for (int i = 0; i < 6; i++)
 252:	00 e0       	ldi	r16, 0x00	; 0
 254:	10 e0       	ldi	r17, 0x00	; 0
 256:	0a c0       	rjmp	.+20     	; 0x26c <__DATA_REGION_LENGTH__+0x6c>
	{
		DisplayWriteChar(c_measuredVoltage[i]);
 258:	e7 e0       	ldi	r30, 0x07	; 7
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	ec 0f       	add	r30, r28
 25e:	fd 1f       	adc	r31, r29
 260:	e0 0f       	add	r30, r16
 262:	f1 1f       	adc	r31, r17
 264:	80 81       	ld	r24, Z
 266:	59 df       	rcall	.-334    	; 0x11a <DisplayWriteChar>
	/* Print 2 spaces */

	/* Print measured voltage */
	DisplaySetDDRAM(ADDR_VOLTAGE_MEAS);

	for (int i = 0; i < 6; i++)
 268:	0f 5f       	subi	r16, 0xFF	; 255
 26a:	1f 4f       	sbci	r17, 0xFF	; 255
 26c:	06 30       	cpi	r16, 0x06	; 6
 26e:	11 05       	cpc	r17, r1
 270:	9c f3       	brlt	.-26     	; 0x258 <__DATA_REGION_LENGTH__+0x58>
	{
		DisplayWriteChar(c_measuredVoltage[i]);
	}
	DisplayWriteChar('V');
 272:	86 e5       	ldi	r24, 0x56	; 86
 274:	52 df       	rcall	.-348    	; 0x11a <DisplayWriteChar>

	/* new line */

	/* Print set current */
	DisplaySetDDRAM(ADDR_CURRENT_SET);
 276:	80 e4       	ldi	r24, 0x40	; 64
 278:	49 df       	rcall	.-366    	; 0x10c <DisplaySetDDRAM>

	for (int i = 0; i < 6; i++)
 27a:	00 e0       	ldi	r16, 0x00	; 0
 27c:	10 e0       	ldi	r17, 0x00	; 0
 27e:	0a c0       	rjmp	.+20     	; 0x294 <__DATA_REGION_LENGTH__+0x94>
	{
		DisplayWriteChar(c_setCurrent[i]);
 280:	ed e0       	ldi	r30, 0x0D	; 13
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	ec 0f       	add	r30, r28
 286:	fd 1f       	adc	r31, r29
 288:	e0 0f       	add	r30, r16
 28a:	f1 1f       	adc	r31, r17
 28c:	80 81       	ld	r24, Z
 28e:	45 df       	rcall	.-374    	; 0x11a <DisplayWriteChar>
	/* new line */

	/* Print set current */
	DisplaySetDDRAM(ADDR_CURRENT_SET);

	for (int i = 0; i < 6; i++)
 290:	0f 5f       	subi	r16, 0xFF	; 255
 292:	1f 4f       	sbci	r17, 0xFF	; 255
 294:	06 30       	cpi	r16, 0x06	; 6
 296:	11 05       	cpc	r17, r1
 298:	9c f3       	brlt	.-26     	; 0x280 <__DATA_REGION_LENGTH__+0x80>
	{
		DisplayWriteChar(c_setCurrent[i]);
	}
	DisplayWriteChar('A');
 29a:	81 e4       	ldi	r24, 0x41	; 65
 29c:	3e df       	rcall	.-388    	; 0x11a <DisplayWriteChar>

	/* Print 2 spaces */

	/* Print measured current */
	DisplaySetDDRAM(ADDR_CURRENT_MEAS);
 29e:	89 e4       	ldi	r24, 0x49	; 73
 2a0:	35 df       	rcall	.-406    	; 0x10c <DisplaySetDDRAM>

	for (int i = 0; i < 6; i++)
 2a2:	00 e0       	ldi	r16, 0x00	; 0
 2a4:	10 e0       	ldi	r17, 0x00	; 0
 2a6:	0a c0       	rjmp	.+20     	; 0x2bc <__DATA_REGION_LENGTH__+0xbc>
	{
		DisplayWriteChar(c_measuredCurrent[i]);
 2a8:	e3 e1       	ldi	r30, 0x13	; 19
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	ec 0f       	add	r30, r28
 2ae:	fd 1f       	adc	r31, r29
 2b0:	e0 0f       	add	r30, r16
 2b2:	f1 1f       	adc	r31, r17
 2b4:	80 81       	ld	r24, Z
 2b6:	31 df       	rcall	.-414    	; 0x11a <DisplayWriteChar>
	/* Print 2 spaces */

	/* Print measured current */
	DisplaySetDDRAM(ADDR_CURRENT_MEAS);

	for (int i = 0; i < 6; i++)
 2b8:	0f 5f       	subi	r16, 0xFF	; 255
 2ba:	1f 4f       	sbci	r17, 0xFF	; 255
 2bc:	06 30       	cpi	r16, 0x06	; 6
 2be:	11 05       	cpc	r17, r1
 2c0:	9c f3       	brlt	.-26     	; 0x2a8 <__DATA_REGION_LENGTH__+0xa8>
	{
		DisplayWriteChar(c_measuredCurrent[i]);
	}
	DisplayWriteChar('A');
 2c2:	81 e4       	ldi	r24, 0x41	; 65
 2c4:	2a df       	rcall	.-428    	; 0x11a <DisplayWriteChar>
}
 2c6:	68 96       	adiw	r28, 0x18	; 24
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	f8 94       	cli
 2cc:	de bf       	out	0x3e, r29	; 62
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	cd bf       	out	0x3d, r28	; 61
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	ff 90       	pop	r15
 2dc:	ef 90       	pop	r14
 2de:	df 90       	pop	r13
 2e0:	cf 90       	pop	r12
 2e2:	08 95       	ret

000002e4 <main>:

/* main */
int main(void)
{	
	/* f clock -> 8 MHz */
	ClockPrescalerSet1();
 2e4:	bf de       	rcall	.-642    	; 0x64 <ClockPrescalerSet1>

	/* Initialize IO */
	IOInit();
 2e6:	c3 de       	rcall	.-634    	; 0x6e <IOInit>

	/* Initialize SPI */
	SPI_MasterInit();
 2e8:	c8 de       	rcall	.-624    	; 0x7a <SPI_MasterInit>
	DDRB = 3; // tmp
 2ea:	83 e0       	ldi	r24, 0x03	; 3
 2ec:	85 b9       	out	0x05, r24	; 5

	/* Initialize Display */
	DisplayInit();
 2ee:	dd de       	rcall	.-582    	; 0xaa <DisplayInit>
	
	// TODO
	BIT_SET(PCMSK1, PCINT10);
 2f0:	ec e6       	ldi	r30, 0x6C	; 108
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	84 60       	ori	r24, 0x04	; 4
 2f8:	80 83       	st	Z, r24
	BIT_SET(PCMSK1, PCINT11);
 2fa:	80 81       	ld	r24, Z
 2fc:	88 60       	ori	r24, 0x08	; 8
 2fe:	80 83       	st	Z, r24
	BIT_SET(PCMSK1, PCINT12);
 300:	80 81       	ld	r24, Z
 302:	80 61       	ori	r24, 0x10	; 16
 304:	80 83       	st	Z, r24
	BIT_SET(PCMSK1, PCINT13);
 306:	80 81       	ld	r24, Z
 308:	80 62       	ori	r24, 0x20	; 32
 30a:	80 83       	st	Z, r24
	BIT_SET(PCICR, PCIE1);
 30c:	e8 e6       	ldi	r30, 0x68	; 104
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	80 81       	ld	r24, Z
 312:	82 60       	ori	r24, 0x02	; 2
 314:	80 83       	st	Z, r24
	
	sei();
 316:	78 94       	sei
	
	setVoltage = 10000;
 318:	80 e1       	ldi	r24, 0x10	; 16
 31a:	97 e2       	ldi	r25, 0x27	; 39
 31c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <setVoltage+0x1>
 320:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <setVoltage>
	setCurrent = 1000;
 324:	88 ee       	ldi	r24, 0xE8	; 232
 326:	93 e0       	ldi	r25, 0x03	; 3
 328:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <setCurrent+0x1>
 32c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <setCurrent>
		 * only 11 bits are used -> steps of 1 mA
		 */
		//measuredCurrent = ADC_Read(ADC_CURRENT) >> 1;
		
		/* Update the LCD display */
		DisplayUpdate(setVoltage, measuredVoltage, setCurrent, measuredCurrent);
 330:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <measuredCurrent>
 334:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <measuredCurrent+0x1>
 338:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <setCurrent>
 33c:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <setCurrent+0x1>
 340:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <measuredVoltage>
 344:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <measuredVoltage+0x1>
 348:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <setVoltage>
 34c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <setVoltage+0x1>
 350:	32 df       	rcall	.-412    	; 0x1b6 <DisplayUpdate>
 352:	ee cf       	rjmp	.-36     	; 0x330 <__stack+0x31>

00000354 <__vector_4>:

	c[2] = ',';
}

ISR(PCINT1_vect, ISR_BLOCK)
{
 354:	1f 92       	push	r1
 356:	0f 92       	push	r0
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	0f 92       	push	r0
 35c:	11 24       	eor	r1, r1
 35e:	2f 93       	push	r18
 360:	3f 93       	push	r19
 362:	8f 93       	push	r24
 364:	9f 93       	push	r25
 366:	af 93       	push	r26
 368:	bf 93       	push	r27
 36a:	ef 93       	push	r30
 36c:	ff 93       	push	r31
	static uint8_t voltageState = 0;
	static uint8_t currentState = 0;
	uint8_t voltageClkState = BIT_CHECK(ENC_PORT, ENC_VOLTAGE_CLK);
 36e:	86 b1       	in	r24, 0x06	; 6
 370:	82 fb       	bst	r24, 2
 372:	22 27       	eor	r18, r18
 374:	20 f9       	bld	r18, 0
	uint8_t voltageDataState = BIT_CHECK(ENC_PORT, ENC_VOLTAGE_DT);
 376:	86 b1       	in	r24, 0x06	; 6
 378:	83 fb       	bst	r24, 3
 37a:	33 27       	eor	r19, r19
 37c:	30 f9       	bld	r19, 0
	uint8_t currentClkState = BIT_CHECK(ENC_PORT, ENC_CURRENT_CLK);
 37e:	86 b1       	in	r24, 0x06	; 6
	uint8_t currentDataState = BIT_CHECK(ENC_PORT, ENC_CURRENT_DT);
 380:	86 b1       	in	r24, 0x06	; 6
	
	switch (voltageState)
 382:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 386:	8e 2f       	mov	r24, r30
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	87 30       	cpi	r24, 0x07	; 7
 38c:	91 05       	cpc	r25, r1
 38e:	08 f0       	brcs	.+2      	; 0x392 <__vector_4+0x3e>
 390:	58 c0       	rjmp	.+176    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 392:	fc 01       	movw	r30, r24
 394:	e6 5e       	subi	r30, 0xE6	; 230
 396:	ff 4f       	sbci	r31, 0xFF	; 255
 398:	09 94       	ijmp
	{
		/* Idle state */
		case 0:
			if (!voltageClkState) // CW
 39a:	21 11       	cpse	r18, r1
 39c:	04 c0       	rjmp	.+8      	; 0x3a6 <__vector_4+0x52>
			{
				voltageState = 1;
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3a4:	4e c0       	rjmp	.+156    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			}
			else if (!voltageDataState) // CCW
 3a6:	31 11       	cpse	r19, r1
 3a8:	4c c0       	rjmp	.+152    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			{
				voltageState = 4;
 3aa:	84 e0       	ldi	r24, 0x04	; 4
 3ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3b0:	48 c0       	rjmp	.+144    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			}
			break;
		
		/* Clockwise rotation */
		case 1:
			if (!voltageDataState)
 3b2:	31 11       	cpse	r19, r1
 3b4:	46 c0       	rjmp	.+140    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			{
				voltageState = 2;
 3b6:	82 e0       	ldi	r24, 0x02	; 2
 3b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3bc:	42 c0       	rjmp	.+132    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			}
			break;
		
		case 2:
			if (voltageClkState)
 3be:	22 23       	and	r18, r18
 3c0:	09 f4       	brne	.+2      	; 0x3c4 <__vector_4+0x70>
 3c2:	3f c0       	rjmp	.+126    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			{
				voltageState = 3;
 3c4:	83 e0       	ldi	r24, 0x03	; 3
 3c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3ca:	3b c0       	rjmp	.+118    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			}
			break;
		
		case 3:
			if (voltageClkState && voltageDataState)
 3cc:	22 23       	and	r18, r18
 3ce:	c9 f1       	breq	.+114    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 3d0:	33 23       	and	r19, r19
 3d2:	b9 f1       	breq	.+110    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			{
				voltageState = 0;
 3d4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				setVoltage += 25;
 3d8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <setVoltage>
 3dc:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <setVoltage+0x1>
 3e0:	49 96       	adiw	r24, 0x19	; 25
 3e2:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <setVoltage+0x1>
 3e6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <setVoltage>
				if (setVoltage > 20000)
 3ea:	81 32       	cpi	r24, 0x21	; 33
 3ec:	9e 44       	sbci	r25, 0x4E	; 78
 3ee:	48 f1       	brcs	.+82     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				{
					setVoltage = 20000;
 3f0:	80 e2       	ldi	r24, 0x20	; 32
 3f2:	9e e4       	ldi	r25, 0x4E	; 78
 3f4:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <setVoltage+0x1>
 3f8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <setVoltage>
 3fc:	22 c0       	rjmp	.+68     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			}
			break;
			
		/* Counter clockwise rotation */
		case 4:
			if (!voltageClkState)
 3fe:	21 11       	cpse	r18, r1
 400:	20 c0       	rjmp	.+64     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			{
				voltageState = 5;
 402:	85 e0       	ldi	r24, 0x05	; 5
 404:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 408:	1c c0       	rjmp	.+56     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			}
			break;
			
		case 5:
			if (voltageDataState)
 40a:	33 23       	and	r19, r19
 40c:	d1 f0       	breq	.+52     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			{
				voltageState = 6;
 40e:	86 e0       	ldi	r24, 0x06	; 6
 410:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 414:	16 c0       	rjmp	.+44     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			}
			break;
		
		case 6:
			if (voltageClkState && voltageDataState)
 416:	22 23       	and	r18, r18
 418:	a1 f0       	breq	.+40     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 41a:	33 23       	and	r19, r19
 41c:	91 f0       	breq	.+36     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			{
				voltageState = 0;
 41e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				setVoltage -= 25;
 422:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <setVoltage>
 426:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <setVoltage+0x1>
 42a:	49 97       	sbiw	r24, 0x19	; 25
 42c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <setVoltage+0x1>
 430:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <setVoltage>
				if (setVoltage > 20000)
 434:	81 32       	cpi	r24, 0x21	; 33
 436:	9e 44       	sbci	r25, 0x4E	; 78
 438:	20 f0       	brcs	.+8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				{
					setVoltage = 0;
 43a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <setVoltage+0x1>
 43e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <setVoltage>
				}
			}
			break;
	}
 442:	ff 91       	pop	r31
 444:	ef 91       	pop	r30
 446:	bf 91       	pop	r27
 448:	af 91       	pop	r26
 44a:	9f 91       	pop	r25
 44c:	8f 91       	pop	r24
 44e:	3f 91       	pop	r19
 450:	2f 91       	pop	r18
 452:	0f 90       	pop	r0
 454:	0f be       	out	0x3f, r0	; 63
 456:	0f 90       	pop	r0
 458:	1f 90       	pop	r1
 45a:	18 95       	reti

0000045c <__udivmodhi4>:
 45c:	aa 1b       	sub	r26, r26
 45e:	bb 1b       	sub	r27, r27
 460:	51 e1       	ldi	r21, 0x11	; 17
 462:	07 c0       	rjmp	.+14     	; 0x472 <__udivmodhi4_ep>

00000464 <__udivmodhi4_loop>:
 464:	aa 1f       	adc	r26, r26
 466:	bb 1f       	adc	r27, r27
 468:	a6 17       	cp	r26, r22
 46a:	b7 07       	cpc	r27, r23
 46c:	10 f0       	brcs	.+4      	; 0x472 <__udivmodhi4_ep>
 46e:	a6 1b       	sub	r26, r22
 470:	b7 0b       	sbc	r27, r23

00000472 <__udivmodhi4_ep>:
 472:	88 1f       	adc	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	5a 95       	dec	r21
 478:	a9 f7       	brne	.-22     	; 0x464 <__udivmodhi4_loop>
 47a:	80 95       	com	r24
 47c:	90 95       	com	r25
 47e:	bc 01       	movw	r22, r24
 480:	cd 01       	movw	r24, r26
 482:	08 95       	ret

00000484 <__divmodhi4>:
 484:	97 fb       	bst	r25, 7
 486:	07 2e       	mov	r0, r23
 488:	16 f4       	brtc	.+4      	; 0x48e <__divmodhi4+0xa>
 48a:	00 94       	com	r0
 48c:	06 d0       	rcall	.+12     	; 0x49a <__divmodhi4_neg1>
 48e:	77 fd       	sbrc	r23, 7
 490:	08 d0       	rcall	.+16     	; 0x4a2 <__divmodhi4_neg2>
 492:	e4 df       	rcall	.-56     	; 0x45c <__udivmodhi4>
 494:	07 fc       	sbrc	r0, 7
 496:	05 d0       	rcall	.+10     	; 0x4a2 <__divmodhi4_neg2>
 498:	3e f4       	brtc	.+14     	; 0x4a8 <__divmodhi4_exit>

0000049a <__divmodhi4_neg1>:
 49a:	90 95       	com	r25
 49c:	81 95       	neg	r24
 49e:	9f 4f       	sbci	r25, 0xFF	; 255
 4a0:	08 95       	ret

000004a2 <__divmodhi4_neg2>:
 4a2:	70 95       	com	r23
 4a4:	61 95       	neg	r22
 4a6:	7f 4f       	sbci	r23, 0xFF	; 255

000004a8 <__divmodhi4_exit>:
 4a8:	08 95       	ret

000004aa <_exit>:
 4aa:	f8 94       	cli

000004ac <__stop_program>:
 4ac:	ff cf       	rjmp	.-2      	; 0x4ac <__stop_program>
