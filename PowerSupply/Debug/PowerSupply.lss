
PowerSupply.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000073c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  0000073c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000076c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012b5  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a60  00000000  00000000  00001b45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a1b  00000000  00000000  000025a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  00002fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000622  00000000  00000000  000031e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000884  00000000  00000000  00003802  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004086  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	27 c0       	rjmp	.+78     	; 0x50 <__ctors_end>
   2:	36 c0       	rjmp	.+108    	; 0x70 <__bad_interrupt>
   4:	35 c0       	rjmp	.+106    	; 0x70 <__bad_interrupt>
   6:	34 c0       	rjmp	.+104    	; 0x70 <__bad_interrupt>
   8:	cd c1       	rjmp	.+922    	; 0x3a4 <__vector_4>
   a:	32 c0       	rjmp	.+100    	; 0x70 <__bad_interrupt>
   c:	31 c0       	rjmp	.+98     	; 0x70 <__bad_interrupt>
   e:	30 c0       	rjmp	.+96     	; 0x70 <__bad_interrupt>
  10:	2f c0       	rjmp	.+94     	; 0x70 <__bad_interrupt>
  12:	2e c0       	rjmp	.+92     	; 0x70 <__bad_interrupt>
  14:	2d c0       	rjmp	.+90     	; 0x70 <__bad_interrupt>
  16:	2c c0       	rjmp	.+88     	; 0x70 <__bad_interrupt>
  18:	2b c0       	rjmp	.+86     	; 0x70 <__bad_interrupt>
  1a:	2a c0       	rjmp	.+84     	; 0x70 <__bad_interrupt>
  1c:	29 c0       	rjmp	.+82     	; 0x70 <__bad_interrupt>
  1e:	28 c0       	rjmp	.+80     	; 0x70 <__bad_interrupt>
  20:	27 c0       	rjmp	.+78     	; 0x70 <__bad_interrupt>
  22:	26 c0       	rjmp	.+76     	; 0x70 <__bad_interrupt>
  24:	25 c0       	rjmp	.+74     	; 0x70 <__bad_interrupt>
  26:	24 c0       	rjmp	.+72     	; 0x70 <__bad_interrupt>
  28:	23 c0       	rjmp	.+70     	; 0x70 <__bad_interrupt>
  2a:	22 c0       	rjmp	.+68     	; 0x70 <__bad_interrupt>
  2c:	21 c0       	rjmp	.+66     	; 0x70 <__bad_interrupt>
  2e:	20 c0       	rjmp	.+64     	; 0x70 <__bad_interrupt>
  30:	1f c0       	rjmp	.+62     	; 0x70 <__bad_interrupt>
  32:	1e c0       	rjmp	.+60     	; 0x70 <__bad_interrupt>
  34:	e2 c1       	rjmp	.+964    	; 0x3fa <__vector_4+0x56>
  36:	ed c1       	rjmp	.+986    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
  38:	f2 c1       	rjmp	.+996    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
  3a:	f8 c1       	rjmp	.+1008   	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
  3c:	10 c2       	rjmp	.+1056   	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
  3e:	15 c2       	rjmp	.+1066   	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
  40:	1a c2       	rjmp	.+1076   	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
  42:	3b c2       	rjmp	.+1142   	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
  44:	46 c2       	rjmp	.+1164   	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
  46:	4b c2       	rjmp	.+1174   	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
  48:	51 c2       	rjmp	.+1186   	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
  4a:	69 c2       	rjmp	.+1234   	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
  4c:	6e c2       	rjmp	.+1244   	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
  4e:	73 c2       	rjmp	.+1254   	; 0x536 <__LOCK_REGION_LENGTH__+0x136>

00000050 <__ctors_end>:
  50:	11 24       	eor	r1, r1
  52:	1f be       	out	0x3f, r1	; 63
  54:	cf ef       	ldi	r28, 0xFF	; 255
  56:	d2 e0       	ldi	r29, 0x02	; 2
  58:	de bf       	out	0x3e, r29	; 62
  5a:	cd bf       	out	0x3d, r28	; 61

0000005c <__do_clear_bss>:
  5c:	21 e0       	ldi	r18, 0x01	; 1
  5e:	a0 e0       	ldi	r26, 0x00	; 0
  60:	b1 e0       	ldi	r27, 0x01	; 1
  62:	01 c0       	rjmp	.+2      	; 0x66 <.do_clear_bss_start>

00000064 <.do_clear_bss_loop>:
  64:	1d 92       	st	X+, r1

00000066 <.do_clear_bss_start>:
  66:	aa 30       	cpi	r26, 0x0A	; 10
  68:	b2 07       	cpc	r27, r18
  6a:	e1 f7       	brne	.-8      	; 0x64 <.do_clear_bss_loop>
  6c:	40 d1       	rcall	.+640    	; 0x2ee <main>
  6e:	2a c3       	rjmp	.+1620   	; 0x6c4 <_exit>

00000070 <__bad_interrupt>:
  70:	c7 cf       	rjmp	.-114    	; 0x0 <__vectors>

00000072 <DisplayEnablePulse>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	8d e0       	ldi	r24, 0x0D	; 13
  74:	8a 95       	dec	r24
  76:	f1 f7       	brne	.-4      	; 0x74 <DisplayEnablePulse+0x2>
  78:	00 00       	nop
  7a:	82 b1       	in	r24, 0x02	; 2
  7c:	84 60       	ori	r24, 0x04	; 4
  7e:	82 b9       	out	0x02, r24	; 2
  80:	8d e0       	ldi	r24, 0x0D	; 13
  82:	8a 95       	dec	r24
  84:	f1 f7       	brne	.-4      	; 0x82 <DisplayEnablePulse+0x10>
  86:	00 00       	nop
  88:	82 b1       	in	r24, 0x02	; 2
  8a:	8b 7f       	andi	r24, 0xFB	; 251
  8c:	82 b9       	out	0x02, r24	; 2
  8e:	8a e6       	ldi	r24, 0x6A	; 106
  90:	8a 95       	dec	r24
  92:	f1 f7       	brne	.-4      	; 0x90 <DisplayEnablePulse+0x1e>
  94:	00 c0       	rjmp	.+0      	; 0x96 <DisplayEnablePulse+0x24>
  96:	08 95       	ret

00000098 <DisplayInit>:
  98:	cf 93       	push	r28
  9a:	82 b1       	in	r24, 0x02	; 2
  9c:	8d 7f       	andi	r24, 0xFD	; 253
  9e:	82 b9       	out	0x02, r24	; 2
  a0:	82 b1       	in	r24, 0x02	; 2
  a2:	8e 7f       	andi	r24, 0xFE	; 254
  a4:	82 b9       	out	0x02, r24	; 2
  a6:	82 b1       	in	r24, 0x02	; 2
  a8:	8b 7f       	andi	r24, 0xFB	; 251
  aa:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	8f e2       	ldi	r24, 0x2F	; 47
  ae:	95 e7       	ldi	r25, 0x75	; 117
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <DisplayInit+0x18>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <DisplayInit+0x1e>
  b6:	00 00       	nop
  b8:	c8 e3       	ldi	r28, 0x38	; 56
  ba:	ca b9       	out	0x0a, r28	; 10
  bc:	da df       	rcall	.-76     	; 0x72 <DisplayEnablePulse>
  be:	8f e0       	ldi	r24, 0x0F	; 15
  c0:	97 e2       	ldi	r25, 0x27	; 39
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <DisplayInit+0x2a>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <DisplayInit+0x30>
  c8:	00 00       	nop
  ca:	ca b9       	out	0x0a, r28	; 10
  cc:	d2 df       	rcall	.-92     	; 0x72 <DisplayEnablePulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	87 ec       	ldi	r24, 0xC7	; 199
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <DisplayInit+0x3a>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <DisplayInit+0x40>
  d8:	00 00       	nop
  da:	ca b9       	out	0x0a, r28	; 10
  dc:	ca df       	rcall	.-108    	; 0x72 <DisplayEnablePulse>
  de:	8d e0       	ldi	r24, 0x0D	; 13
  e0:	8a b9       	out	0x0a, r24	; 10
  e2:	c7 df       	rcall	.-114    	; 0x72 <DisplayEnablePulse>
  e4:	84 e0       	ldi	r24, 0x04	; 4
  e6:	8a b9       	out	0x0a, r24	; 10
  e8:	c4 df       	rcall	.-120    	; 0x72 <DisplayEnablePulse>
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	8a b9       	out	0x0a, r24	; 10
  ee:	c1 df       	rcall	.-126    	; 0x72 <DisplayEnablePulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	8f e9       	ldi	r24, 0x9F	; 159
  f2:	9f e0       	ldi	r25, 0x0F	; 15
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <DisplayInit+0x5c>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <DisplayInit+0x62>
  fa:	00 00       	nop
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <DisplaySetDDRAM>:
 100:	92 b1       	in	r25, 0x02	; 2
 102:	9e 7f       	andi	r25, 0xFE	; 254
 104:	92 b9       	out	0x02, r25	; 2
 106:	80 68       	ori	r24, 0x80	; 128
 108:	8a b9       	out	0x0a, r24	; 10
 10a:	b3 df       	rcall	.-154    	; 0x72 <DisplayEnablePulse>
 10c:	08 95       	ret

0000010e <DisplayWriteChar>:
 10e:	92 b1       	in	r25, 0x02	; 2
 110:	91 60       	ori	r25, 0x01	; 1
 112:	92 b9       	out	0x02, r25	; 2
 114:	8a b9       	out	0x0a, r24	; 10
 116:	ad df       	rcall	.-166    	; 0x72 <DisplayEnablePulse>
 118:	08 95       	ret

0000011a <IntegerToASCII>:
 11a:	ef 92       	push	r14
 11c:	ff 92       	push	r15
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	e8 2f       	mov	r30, r24
 128:	49 2f       	mov	r20, r25
 12a:	7b 01       	movw	r14, r22
 12c:	c0 e1       	ldi	r28, 0x10	; 16
 12e:	d7 e2       	ldi	r29, 0x27	; 39
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	13 c0       	rjmp	.+38     	; 0x15c <IntegerToASCII+0x42>
 136:	87 01       	movw	r16, r14
 138:	02 0f       	add	r16, r18
 13a:	13 1f       	adc	r17, r19
 13c:	8e 2f       	mov	r24, r30
 13e:	94 2f       	mov	r25, r20
 140:	be 01       	movw	r22, r28
 142:	80 d2       	rcall	.+1280   	; 0x644 <__udivmodhi4>
 144:	60 5d       	subi	r22, 0xD0	; 208
 146:	f8 01       	movw	r30, r16
 148:	60 83       	st	Z, r22
 14a:	e8 2f       	mov	r30, r24
 14c:	49 2f       	mov	r20, r25
 14e:	2f 5f       	subi	r18, 0xFF	; 255
 150:	3f 4f       	sbci	r19, 0xFF	; 255
 152:	ce 01       	movw	r24, r28
 154:	6a e0       	ldi	r22, 0x0A	; 10
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	89 d2       	rcall	.+1298   	; 0x66c <__divmodhi4>
 15a:	eb 01       	movw	r28, r22
 15c:	25 30       	cpi	r18, 0x05	; 5
 15e:	31 05       	cpc	r19, r1
 160:	54 f3       	brlt	.-44     	; 0x136 <IntegerToASCII+0x1c>
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	1f 91       	pop	r17
 168:	0f 91       	pop	r16
 16a:	ff 90       	pop	r15
 16c:	ef 90       	pop	r14
 16e:	08 95       	ret

00000170 <FormatValue>:
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	dc 01       	movw	r26, r24
 176:	8c 91       	ld	r24, X
 178:	80 33       	cpi	r24, 0x30	; 48
 17a:	11 f4       	brne	.+4      	; 0x180 <FormatValue+0x10>
 17c:	80 e2       	ldi	r24, 0x20	; 32
 17e:	8c 93       	st	X, r24
 180:	25 e0       	ldi	r18, 0x05	; 5
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	09 c0       	rjmp	.+18     	; 0x198 <FormatValue+0x28>
 186:	fd 01       	movw	r30, r26
 188:	e2 0f       	add	r30, r18
 18a:	f3 1f       	adc	r31, r19
 18c:	ef 01       	movw	r28, r30
 18e:	21 97       	sbiw	r28, 0x01	; 1
 190:	88 81       	ld	r24, Y
 192:	80 83       	st	Z, r24
 194:	21 50       	subi	r18, 0x01	; 1
 196:	31 09       	sbc	r19, r1
 198:	23 30       	cpi	r18, 0x03	; 3
 19a:	31 05       	cpc	r19, r1
 19c:	a4 f7       	brge	.-24     	; 0x186 <FormatValue+0x16>
 19e:	8c e2       	ldi	r24, 0x2C	; 44
 1a0:	12 96       	adiw	r26, 0x02	; 2
 1a2:	8c 93       	st	X, r24
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <DisplayUpdate>:
 1aa:	cf 92       	push	r12
 1ac:	df 92       	push	r13
 1ae:	ef 92       	push	r14
 1b0:	ff 92       	push	r15
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	68 97       	sbiw	r28, 0x18	; 24
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
 1ca:	6b 01       	movw	r12, r22
 1cc:	7a 01       	movw	r14, r20
 1ce:	89 01       	movw	r16, r18
 1d0:	be 01       	movw	r22, r28
 1d2:	6f 5f       	subi	r22, 0xFF	; 255
 1d4:	7f 4f       	sbci	r23, 0xFF	; 255
 1d6:	a1 df       	rcall	.-190    	; 0x11a <IntegerToASCII>
 1d8:	be 01       	movw	r22, r28
 1da:	69 5f       	subi	r22, 0xF9	; 249
 1dc:	7f 4f       	sbci	r23, 0xFF	; 255
 1de:	c6 01       	movw	r24, r12
 1e0:	9c df       	rcall	.-200    	; 0x11a <IntegerToASCII>
 1e2:	be 01       	movw	r22, r28
 1e4:	63 5f       	subi	r22, 0xF3	; 243
 1e6:	7f 4f       	sbci	r23, 0xFF	; 255
 1e8:	c7 01       	movw	r24, r14
 1ea:	97 df       	rcall	.-210    	; 0x11a <IntegerToASCII>
 1ec:	be 01       	movw	r22, r28
 1ee:	6d 5e       	subi	r22, 0xED	; 237
 1f0:	7f 4f       	sbci	r23, 0xFF	; 255
 1f2:	c8 01       	movw	r24, r16
 1f4:	92 df       	rcall	.-220    	; 0x11a <IntegerToASCII>
 1f6:	ce 01       	movw	r24, r28
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	ba df       	rcall	.-140    	; 0x170 <FormatValue>
 1fc:	ce 01       	movw	r24, r28
 1fe:	07 96       	adiw	r24, 0x07	; 7
 200:	b7 df       	rcall	.-146    	; 0x170 <FormatValue>
 202:	ce 01       	movw	r24, r28
 204:	0d 96       	adiw	r24, 0x0d	; 13
 206:	b4 df       	rcall	.-152    	; 0x170 <FormatValue>
 208:	ce 01       	movw	r24, r28
 20a:	43 96       	adiw	r24, 0x13	; 19
 20c:	b1 df       	rcall	.-158    	; 0x170 <FormatValue>
 20e:	82 b1       	in	r24, 0x02	; 2
 210:	8e 7f       	andi	r24, 0xFE	; 254
 212:	82 b9       	out	0x02, r24	; 2
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	8a b9       	out	0x0a, r24	; 10
 218:	2c df       	rcall	.-424    	; 0x72 <DisplayEnablePulse>
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	71 df       	rcall	.-286    	; 0x100 <DisplaySetDDRAM>
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	10 e0       	ldi	r17, 0x00	; 0
 222:	0a c0       	rjmp	.+20     	; 0x238 <__DATA_REGION_LENGTH__+0x38>
 224:	e1 e0       	ldi	r30, 0x01	; 1
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	ec 0f       	add	r30, r28
 22a:	fd 1f       	adc	r31, r29
 22c:	e0 0f       	add	r30, r16
 22e:	f1 1f       	adc	r31, r17
 230:	80 81       	ld	r24, Z
 232:	6d df       	rcall	.-294    	; 0x10e <DisplayWriteChar>
 234:	0f 5f       	subi	r16, 0xFF	; 255
 236:	1f 4f       	sbci	r17, 0xFF	; 255
 238:	06 30       	cpi	r16, 0x06	; 6
 23a:	11 05       	cpc	r17, r1
 23c:	9c f3       	brlt	.-26     	; 0x224 <__DATA_REGION_LENGTH__+0x24>
 23e:	86 e5       	ldi	r24, 0x56	; 86
 240:	66 df       	rcall	.-308    	; 0x10e <DisplayWriteChar>
 242:	89 e0       	ldi	r24, 0x09	; 9
 244:	5d df       	rcall	.-326    	; 0x100 <DisplaySetDDRAM>
 246:	00 e0       	ldi	r16, 0x00	; 0
 248:	10 e0       	ldi	r17, 0x00	; 0
 24a:	0a c0       	rjmp	.+20     	; 0x260 <__DATA_REGION_LENGTH__+0x60>
 24c:	e7 e0       	ldi	r30, 0x07	; 7
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	ec 0f       	add	r30, r28
 252:	fd 1f       	adc	r31, r29
 254:	e0 0f       	add	r30, r16
 256:	f1 1f       	adc	r31, r17
 258:	80 81       	ld	r24, Z
 25a:	59 df       	rcall	.-334    	; 0x10e <DisplayWriteChar>
 25c:	0f 5f       	subi	r16, 0xFF	; 255
 25e:	1f 4f       	sbci	r17, 0xFF	; 255
 260:	06 30       	cpi	r16, 0x06	; 6
 262:	11 05       	cpc	r17, r1
 264:	9c f3       	brlt	.-26     	; 0x24c <__DATA_REGION_LENGTH__+0x4c>
 266:	86 e5       	ldi	r24, 0x56	; 86
 268:	52 df       	rcall	.-348    	; 0x10e <DisplayWriteChar>
 26a:	80 e4       	ldi	r24, 0x40	; 64
 26c:	49 df       	rcall	.-366    	; 0x100 <DisplaySetDDRAM>
 26e:	00 e0       	ldi	r16, 0x00	; 0
 270:	10 e0       	ldi	r17, 0x00	; 0
 272:	0a c0       	rjmp	.+20     	; 0x288 <__DATA_REGION_LENGTH__+0x88>
 274:	ed e0       	ldi	r30, 0x0D	; 13
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	ec 0f       	add	r30, r28
 27a:	fd 1f       	adc	r31, r29
 27c:	e0 0f       	add	r30, r16
 27e:	f1 1f       	adc	r31, r17
 280:	80 81       	ld	r24, Z
 282:	45 df       	rcall	.-374    	; 0x10e <DisplayWriteChar>
 284:	0f 5f       	subi	r16, 0xFF	; 255
 286:	1f 4f       	sbci	r17, 0xFF	; 255
 288:	06 30       	cpi	r16, 0x06	; 6
 28a:	11 05       	cpc	r17, r1
 28c:	9c f3       	brlt	.-26     	; 0x274 <__DATA_REGION_LENGTH__+0x74>
 28e:	81 e4       	ldi	r24, 0x41	; 65
 290:	3e df       	rcall	.-388    	; 0x10e <DisplayWriteChar>
 292:	89 e4       	ldi	r24, 0x49	; 73
 294:	35 df       	rcall	.-406    	; 0x100 <DisplaySetDDRAM>
 296:	00 e0       	ldi	r16, 0x00	; 0
 298:	10 e0       	ldi	r17, 0x00	; 0
 29a:	0a c0       	rjmp	.+20     	; 0x2b0 <__DATA_REGION_LENGTH__+0xb0>
 29c:	e3 e1       	ldi	r30, 0x13	; 19
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	ec 0f       	add	r30, r28
 2a2:	fd 1f       	adc	r31, r29
 2a4:	e0 0f       	add	r30, r16
 2a6:	f1 1f       	adc	r31, r17
 2a8:	80 81       	ld	r24, Z
 2aa:	31 df       	rcall	.-414    	; 0x10e <DisplayWriteChar>
 2ac:	0f 5f       	subi	r16, 0xFF	; 255
 2ae:	1f 4f       	sbci	r17, 0xFF	; 255
 2b0:	06 30       	cpi	r16, 0x06	; 6
 2b2:	11 05       	cpc	r17, r1
 2b4:	9c f3       	brlt	.-26     	; 0x29c <__DATA_REGION_LENGTH__+0x9c>
 2b6:	81 e4       	ldi	r24, 0x41	; 65
 2b8:	2a df       	rcall	.-428    	; 0x10e <DisplayWriteChar>
 2ba:	68 96       	adiw	r28, 0x18	; 24
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	f8 94       	cli
 2c0:	de bf       	out	0x3e, r29	; 62
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	cd bf       	out	0x3d, r28	; 61
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	0f 91       	pop	r16
 2ce:	ff 90       	pop	r15
 2d0:	ef 90       	pop	r14
 2d2:	df 90       	pop	r13
 2d4:	cf 90       	pop	r12
 2d6:	08 95       	ret

000002d8 <ClockPrescalerSet1>:
    }
}

void ClockPrescalerSet1()
{
	CCP = 0xd8;
 2d8:	88 ed       	ldi	r24, 0xD8	; 216
 2da:	86 bf       	out	0x36, r24	; 54
	CLKPR = 0b00000000;
 2dc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fe061>
 2e0:	08 95       	ret

000002e2 <IOInit>:
}

void IOInit()
{
	DDRA = 0x07;
 2e2:	87 e0       	ldi	r24, 0x07	; 7
 2e4:	81 b9       	out	0x01, r24	; 1
	DDRB = 0x00;
 2e6:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xff;
 2e8:	8f ef       	ldi	r24, 0xFF	; 255
 2ea:	89 b9       	out	0x09, r24	; 9
 2ec:	08 95       	ret

000002ee <main>:

/* main */
int main(void)
{
	/* f clock -> 8 MHz */
	ClockPrescalerSet1();
 2ee:	f4 df       	rcall	.-24     	; 0x2d8 <ClockPrescalerSet1>

	/* Initialize IO */
	IOInit();
 2f0:	f8 df       	rcall	.-16     	; 0x2e2 <IOInit>

	/* Initialize SPI */
	SPI_MasterInit();
 2f2:	46 d1       	rcall	.+652    	; 0x580 <SPI_MasterInit>

	/* Initialize Display */
	DisplayInit();
 2f4:	d1 de       	rcall	.-606    	; 0x98 <DisplayInit>

	/* Initialize rotary encoders */
	rotaryEncoderInit();
 2f6:	41 d0       	rcall	.+130    	; 0x37a <rotaryEncoderInit>

	setVoltage = 10000;
 2f8:	80 e1       	ldi	r24, 0x10	; 16
 2fa:	97 e2       	ldi	r25, 0x27	; 39
 2fc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <setVoltage+0x1>
 300:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <setVoltage>
	setCurrent = 250;
 304:	8a ef       	ldi	r24, 0xFA	; 250
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <setCurrent+0x1>
 30c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <setCurrent>

    while (1)
    {
		/* Set voltage */
		DAC_Set(DAC_VOLTAGE, setVoltage / 5);
 310:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <setVoltage>
 314:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <setVoltage+0x1>
 318:	65 e0       	ldi	r22, 0x05	; 5
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	93 d1       	rcall	.+806    	; 0x644 <__udivmodhi4>
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	5d d1       	rcall	.+698    	; 0x5dc <DAC_Set>

		/* Set current */
		DAC_Set(DAC_CURRENT, setCurrent << 1);
 322:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <setCurrent>
 326:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <setCurrent+0x1>
 32a:	66 0f       	add	r22, r22
 32c:	77 1f       	adc	r23, r23
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	55 d1       	rcall	.+682    	; 0x5dc <DAC_Set>

		/*
		 * Measure voltage
		 * 12-bit resolution measures voltage in steps of 5 mV
		 */
		measuredVoltage = ADC_Read(ADC_VOLTAGE) * 5;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	6c d1       	rcall	.+728    	; 0x60e <ADC_Read>
 336:	9c 01       	movw	r18, r24
 338:	22 0f       	add	r18, r18
 33a:	33 1f       	adc	r19, r19
 33c:	22 0f       	add	r18, r18
 33e:	33 1f       	adc	r19, r19
 340:	82 0f       	add	r24, r18
 342:	93 1f       	adc	r25, r19
 344:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <measuredVoltage+0x1>
 348:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <measuredVoltage>
		/*
		 * Measure current
		 * 12-bit resolution measures current in steps of 0.5 mA
		 * only 11 bits are used -> steps of 1 mA
		 */
		measuredCurrent = ADC_Read(ADC_CURRENT) >> 1;
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	5f d1       	rcall	.+702    	; 0x60e <ADC_Read>
 350:	9c 01       	movw	r18, r24
 352:	36 95       	lsr	r19
 354:	27 95       	ror	r18
 356:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 35a:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>

		/* Update the LCD display */
		DisplayUpdate(setVoltage, measuredVoltage, setCurrent, measuredCurrent);
 35e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <setCurrent>
 362:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <setCurrent+0x1>
 366:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <measuredVoltage>
 36a:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <measuredVoltage+0x1>
 36e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <setVoltage>
 372:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <setVoltage+0x1>
 376:	19 df       	rcall	.-462    	; 0x1aa <DisplayUpdate>
 378:	cb cf       	rjmp	.-106    	; 0x310 <__stack+0x11>

0000037a <rotaryEncoderInit>:
extern uint16_t setCurrent;

void rotaryEncoderInit()
{
	/* Enable interrupt for change on rotary encoder pins */
	BIT_SET(PCMSK1, PCINT10);
 37a:	ec e6       	ldi	r30, 0x6C	; 108
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	84 60       	ori	r24, 0x04	; 4
 382:	80 83       	st	Z, r24
	BIT_SET(PCMSK1, PCINT11);
 384:	80 81       	ld	r24, Z
 386:	88 60       	ori	r24, 0x08	; 8
 388:	80 83       	st	Z, r24
	BIT_SET(PCMSK1, PCINT12);
 38a:	80 81       	ld	r24, Z
 38c:	80 61       	ori	r24, 0x10	; 16
 38e:	80 83       	st	Z, r24
	BIT_SET(PCMSK1, PCINT13);
 390:	80 81       	ld	r24, Z
 392:	80 62       	ori	r24, 0x20	; 32
 394:	80 83       	st	Z, r24
	BIT_SET(PCICR, PCIE1);
 396:	e8 e6       	ldi	r30, 0x68	; 104
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	82 60       	ori	r24, 0x02	; 2
 39e:	80 83       	st	Z, r24

	/* Enable global interrupts */
	sei();
 3a0:	78 94       	sei
 3a2:	08 95       	ret

000003a4 <__vector_4>:
}

ISR(PCINT1_vect, ISR_BLOCK)
{
 3a4:	1f 92       	push	r1
 3a6:	0f 92       	push	r0
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	0f 92       	push	r0
 3ac:	11 24       	eor	r1, r1
 3ae:	2f 93       	push	r18
 3b0:	3f 93       	push	r19
 3b2:	4f 93       	push	r20
 3b4:	5f 93       	push	r21
 3b6:	8f 93       	push	r24
 3b8:	9f 93       	push	r25
 3ba:	af 93       	push	r26
 3bc:	bf 93       	push	r27
 3be:	ef 93       	push	r30
 3c0:	ff 93       	push	r31
	static uint8_t voltageState = 0;
	static uint8_t currentState = 0;
	uint8_t voltageClkState = BIT_CHECK(ENC_PORT, ENC_VOLTAGE_CLK);
 3c2:	84 b1       	in	r24, 0x04	; 4
 3c4:	82 fb       	bst	r24, 2
 3c6:	22 27       	eor	r18, r18
 3c8:	20 f9       	bld	r18, 0
	uint8_t voltageDataState = BIT_CHECK(ENC_PORT, ENC_VOLTAGE_DT);
 3ca:	84 b1       	in	r24, 0x04	; 4
 3cc:	83 fb       	bst	r24, 3
 3ce:	33 27       	eor	r19, r19
 3d0:	30 f9       	bld	r19, 0
	uint8_t currentClkState = BIT_CHECK(ENC_PORT, ENC_CURRENT_CLK);
 3d2:	84 b1       	in	r24, 0x04	; 4
 3d4:	84 fb       	bst	r24, 4
 3d6:	55 27       	eor	r21, r21
 3d8:	50 f9       	bld	r21, 0
	uint8_t currentDataState = BIT_CHECK(ENC_PORT, ENC_CURRENT_DT);
 3da:	84 b1       	in	r24, 0x04	; 4
 3dc:	85 fb       	bst	r24, 5
 3de:	44 27       	eor	r20, r20
 3e0:	40 f9       	bld	r20, 0

	/* Rotary encoder voltage */
	switch (voltageState)
 3e2:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <voltageState.1616>
 3e6:	8e 2f       	mov	r24, r30
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	87 30       	cpi	r24, 0x07	; 7
 3ec:	91 05       	cpc	r25, r1
 3ee:	08 f0       	brcs	.+2      	; 0x3f2 <__vector_4+0x4e>
 3f0:	58 c0       	rjmp	.+176    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 3f2:	fc 01       	movw	r30, r24
 3f4:	e6 5e       	subi	r30, 0xE6	; 230
 3f6:	ff 4f       	sbci	r31, 0xFF	; 255
 3f8:	09 94       	ijmp
	{
		/* Idle state */
		case 0:
		if (!voltageClkState) // CW
 3fa:	21 11       	cpse	r18, r1
 3fc:	04 c0       	rjmp	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		{
			voltageState = 1;
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <voltageState.1616>
 404:	4e c0       	rjmp	.+156    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		}
		else if (!voltageDataState) // CCW
 406:	31 11       	cpse	r19, r1
 408:	4c c0       	rjmp	.+152    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		{
			voltageState = 4;
 40a:	84 e0       	ldi	r24, 0x04	; 4
 40c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <voltageState.1616>
 410:	48 c0       	rjmp	.+144    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		}
		break;

		/* Clockwise rotation */
		case 1:
		if (!voltageDataState)
 412:	31 11       	cpse	r19, r1
 414:	46 c0       	rjmp	.+140    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		{
			voltageState = 2;
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <voltageState.1616>
 41c:	42 c0       	rjmp	.+132    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		}
		break;

		case 2:
		if (voltageClkState)
 41e:	22 23       	and	r18, r18
 420:	09 f4       	brne	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 422:	3f c0       	rjmp	.+126    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		{
			voltageState = 3;
 424:	83 e0       	ldi	r24, 0x03	; 3
 426:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <voltageState.1616>
 42a:	3b c0       	rjmp	.+118    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		}
		break;

		case 3:
		if (voltageClkState && voltageDataState)
 42c:	22 23       	and	r18, r18
 42e:	c9 f1       	breq	.+114    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 430:	33 23       	and	r19, r19
 432:	b9 f1       	breq	.+110    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		{
			voltageState = 0;
 434:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <voltageState.1616>
			setVoltage += 25;
 438:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <setVoltage>
 43c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <setVoltage+0x1>
 440:	49 96       	adiw	r24, 0x19	; 25
 442:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <setVoltage+0x1>
 446:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <setVoltage>
			if (setVoltage > 20000)
 44a:	81 32       	cpi	r24, 0x21	; 33
 44c:	9e 44       	sbci	r25, 0x4E	; 78
 44e:	48 f1       	brcs	.+82     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
			{
				setVoltage = 20000;
 450:	80 e2       	ldi	r24, 0x20	; 32
 452:	9e e4       	ldi	r25, 0x4E	; 78
 454:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <setVoltage+0x1>
 458:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <setVoltage>
 45c:	22 c0       	rjmp	.+68     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		}
		break;

		/* Counter clockwise rotation */
		case 4:
		if (!voltageClkState)
 45e:	21 11       	cpse	r18, r1
 460:	20 c0       	rjmp	.+64     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		{
			voltageState = 5;
 462:	85 e0       	ldi	r24, 0x05	; 5
 464:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <voltageState.1616>
 468:	1c c0       	rjmp	.+56     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		}
		break;

		case 5:
		if (voltageDataState)
 46a:	33 23       	and	r19, r19
 46c:	d1 f0       	breq	.+52     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		{
			voltageState = 6;
 46e:	86 e0       	ldi	r24, 0x06	; 6
 470:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <voltageState.1616>
 474:	16 c0       	rjmp	.+44     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		}
		break;

		case 6:
		if (voltageClkState && voltageDataState)
 476:	22 23       	and	r18, r18
 478:	a1 f0       	breq	.+40     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 47a:	33 23       	and	r19, r19
 47c:	91 f0       	breq	.+36     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		{
			voltageState = 0;
 47e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <voltageState.1616>
			setVoltage -= 25;
 482:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <setVoltage>
 486:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <setVoltage+0x1>
 48a:	49 97       	sbiw	r24, 0x19	; 25
 48c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <setVoltage+0x1>
 490:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <setVoltage>
			if (setVoltage > 20000)
 494:	81 32       	cpi	r24, 0x21	; 33
 496:	9e 44       	sbci	r25, 0x4E	; 78
 498:	20 f0       	brcs	.+8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
			{
				setVoltage = 0;
 49a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <setVoltage+0x1>
 49e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <setVoltage>
		}
		break;
	}

	/* Rotary encoder current */
	switch (currentState)
 4a2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <currentState.1617>
 4a6:	8e 2f       	mov	r24, r30
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	87 30       	cpi	r24, 0x07	; 7
 4ac:	91 05       	cpc	r25, r1
 4ae:	08 f0       	brcs	.+2      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4b0:	58 c0       	rjmp	.+176    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 4b2:	fc 01       	movw	r30, r24
 4b4:	ef 5d       	subi	r30, 0xDF	; 223
 4b6:	ff 4f       	sbci	r31, 0xFF	; 255
 4b8:	09 94       	ijmp
	{
		/* Idle state */
		case 0:
		if (!currentClkState) // CW
 4ba:	51 11       	cpse	r21, r1
 4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
		{
			currentState = 1;
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <currentState.1617>
 4c4:	4e c0       	rjmp	.+156    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
		}
		else if (!currentDataState) // CCW
 4c6:	41 11       	cpse	r20, r1
 4c8:	4c c0       	rjmp	.+152    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
		{
			currentState = 4;
 4ca:	84 e0       	ldi	r24, 0x04	; 4
 4cc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <currentState.1617>
 4d0:	48 c0       	rjmp	.+144    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
		}
		break;

		/* Clockwise rotation */
		case 1:
		if (!currentDataState)
 4d2:	41 11       	cpse	r20, r1
 4d4:	46 c0       	rjmp	.+140    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
		{
			currentState = 2;
 4d6:	82 e0       	ldi	r24, 0x02	; 2
 4d8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <currentState.1617>
 4dc:	42 c0       	rjmp	.+132    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
		}
		break;

		case 2:
		if (currentClkState)
 4de:	55 23       	and	r21, r21
 4e0:	09 f4       	brne	.+2      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4e2:	3f c0       	rjmp	.+126    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
		{
			currentState = 3;
 4e4:	83 e0       	ldi	r24, 0x03	; 3
 4e6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <currentState.1617>
 4ea:	3b c0       	rjmp	.+118    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
		}
		break;

		case 3:
		if (currentClkState && currentDataState)
 4ec:	55 23       	and	r21, r21
 4ee:	c9 f1       	breq	.+114    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 4f0:	44 23       	and	r20, r20
 4f2:	b9 f1       	breq	.+110    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
		{
			currentState = 0;
 4f4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <currentState.1617>
			setCurrent += 1;
 4f8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <setCurrent>
 4fc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <setCurrent+0x1>
 500:	01 96       	adiw	r24, 0x01	; 1
 502:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <setCurrent+0x1>
 506:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <setCurrent>
			if (setCurrent > 2000)
 50a:	81 3d       	cpi	r24, 0xD1	; 209
 50c:	97 40       	sbci	r25, 0x07	; 7
 50e:	48 f1       	brcs	.+82     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
			{
				setCurrent = 2000;
 510:	80 ed       	ldi	r24, 0xD0	; 208
 512:	97 e0       	ldi	r25, 0x07	; 7
 514:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <setCurrent+0x1>
 518:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <setCurrent>
 51c:	22 c0       	rjmp	.+68     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
		}
		break;

		/* Counter clockwise rotation */
		case 4:
		if (!currentClkState)
 51e:	51 11       	cpse	r21, r1
 520:	20 c0       	rjmp	.+64     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
		{
			currentState = 5;
 522:	85 e0       	ldi	r24, 0x05	; 5
 524:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <currentState.1617>
 528:	1c c0       	rjmp	.+56     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
		}
		break;

		case 5:
		if (currentDataState)
 52a:	44 23       	and	r20, r20
 52c:	d1 f0       	breq	.+52     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
		{
			currentState = 6;
 52e:	86 e0       	ldi	r24, 0x06	; 6
 530:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <currentState.1617>
 534:	16 c0       	rjmp	.+44     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
		}
		break;

		case 6:
		if (currentClkState && currentDataState)
 536:	55 23       	and	r21, r21
 538:	a1 f0       	breq	.+40     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 53a:	44 23       	and	r20, r20
 53c:	91 f0       	breq	.+36     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
		{
			currentState = 0;
 53e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <currentState.1617>
			setCurrent -= 1;
 542:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <setCurrent>
 546:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <setCurrent+0x1>
 54a:	01 97       	sbiw	r24, 0x01	; 1
 54c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <setCurrent+0x1>
 550:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <setCurrent>
			if (setCurrent > 2000)
 554:	81 3d       	cpi	r24, 0xD1	; 209
 556:	97 40       	sbci	r25, 0x07	; 7
 558:	20 f0       	brcs	.+8      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
			{
				setCurrent = 0;
 55a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <setCurrent+0x1>
 55e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <setCurrent>
			}
		}
		break;
	}
 562:	ff 91       	pop	r31
 564:	ef 91       	pop	r30
 566:	bf 91       	pop	r27
 568:	af 91       	pop	r26
 56a:	9f 91       	pop	r25
 56c:	8f 91       	pop	r24
 56e:	5f 91       	pop	r21
 570:	4f 91       	pop	r20
 572:	3f 91       	pop	r19
 574:	2f 91       	pop	r18
 576:	0f 90       	pop	r0
 578:	0f be       	out	0x3f, r0	; 63
 57a:	0f 90       	pop	r0
 57c:	1f 90       	pop	r1
 57e:	18 95       	reti

00000580 <SPI_MasterInit>:
#include "spi.h"

void SPI_MasterInit()
{
	/* MOSI and SCK -> output, RST and MISO -> input */
	DDRD = 0b00001001;
 580:	89 e0       	ldi	r24, 0x09	; 9
 582:	8d b9       	out	0x0d, r24	; 13
	/* Enable SPI, Master, clock -> 500 KHz */
	SPCR = 0b01010001;
 584:	81 e5       	ldi	r24, 0x51	; 81
 586:	8c bd       	out	0x2c, r24	; 44
 588:	08 95       	ret

0000058a <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(uint8_t data)
{
	/* Start transmission */
	SPDR = data;
 58a:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 58c:	0d b4       	in	r0, 0x2d	; 45
 58e:	07 fe       	sbrs	r0, 7
 590:	fd cf       	rjmp	.-6      	; 0x58c <SPI_MasterTransmit+0x2>
}
 592:	08 95       	ret

00000594 <ChipSelect>:

void ChipSelect(uint8_t pin, uint8_t state)
{
 594:	0f 93       	push	r16
 596:	08 2f       	mov	r16, r24
	switch (state)
 598:	61 30       	cpi	r22, 0x01	; 1
 59a:	89 f4       	brne	.+34     	; 0x5be <ChipSelect+0x2a>
	{
		/* Sink */
		case ACTIVE:
			BIT_SET(DDRB, pin);
 59c:	e5 b1       	in	r30, 0x05	; 5
 59e:	21 e0       	ldi	r18, 0x01	; 1
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	40 e0       	ldi	r20, 0x00	; 0
 5a4:	50 e0       	ldi	r21, 0x00	; 0
 5a6:	60 e0       	ldi	r22, 0x00	; 0
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	71 d0       	rcall	.+226    	; 0x692 <__ashldi3>
 5b0:	e2 2b       	or	r30, r18
 5b2:	e5 b9       	out	0x05, r30	; 5
			BIT_CLEAR(PORTB, pin);
 5b4:	86 b1       	in	r24, 0x06	; 6
 5b6:	20 95       	com	r18
 5b8:	28 23       	and	r18, r24
 5ba:	26 b9       	out	0x06, r18	; 6
			break;
 5bc:	0d c0       	rjmp	.+26     	; 0x5d8 <ChipSelect+0x44>
		/* High-Z */
		case INACTIVE:
		default:
			BIT_CLEAR(DDRB, pin);
 5be:	e5 b1       	in	r30, 0x05	; 5
 5c0:	21 e0       	ldi	r18, 0x01	; 1
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	40 e0       	ldi	r20, 0x00	; 0
 5c6:	50 e0       	ldi	r21, 0x00	; 0
 5c8:	60 e0       	ldi	r22, 0x00	; 0
 5ca:	70 e0       	ldi	r23, 0x00	; 0
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	60 d0       	rcall	.+192    	; 0x692 <__ashldi3>
 5d2:	20 95       	com	r18
 5d4:	e2 23       	and	r30, r18
 5d6:	e5 b9       	out	0x05, r30	; 5
			break;
	}
}
 5d8:	0f 91       	pop	r16
 5da:	08 95       	ret

000005dc <DAC_Set>:

void DAC_Set(uint8_t channel, uint16_t data)
{
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
	/* Mask data */
	data &= 0x0fff;
 5e0:	eb 01       	movw	r28, r22
 5e2:	df 70       	andi	r29, 0x0F	; 15
	 * bit 15: Select channel
	 * bit 14: Bypass input buffer
	 * bit 13: Output gain = 1
	 * bit 12: /SHDN bit
	 */
	data |= (0x3000 + (channel << 15));
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	99 27       	eor	r25, r25
 5e8:	86 95       	lsr	r24
 5ea:	97 95       	ror	r25
 5ec:	88 27       	eor	r24, r24
 5ee:	90 5d       	subi	r25, 0xD0	; 208
 5f0:	c8 2b       	or	r28, r24
 5f2:	d9 2b       	or	r29, r25

	/* Transmit data */
	ChipSelect(CS_DAC, ACTIVE);
 5f4:	61 e0       	ldi	r22, 0x01	; 1
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	cd df       	rcall	.-102    	; 0x594 <ChipSelect>
	SPI_MasterTransmit(data >> 8);		// high byte
 5fa:	8d 2f       	mov	r24, r29
 5fc:	c6 df       	rcall	.-116    	; 0x58a <SPI_MasterTransmit>
	SPI_MasterTransmit(data & 0x00ff);	// low byte
 5fe:	8c 2f       	mov	r24, r28
 600:	c4 df       	rcall	.-120    	; 0x58a <SPI_MasterTransmit>
	ChipSelect(CS_DAC, INACTIVE);
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	c6 df       	rcall	.-116    	; 0x594 <ChipSelect>
}
 608:	df 91       	pop	r29
 60a:	cf 91       	pop	r28
 60c:	08 95       	ret

0000060e <ADC_Read>:

uint16_t ADC_Read(uint8_t channel)
{
 60e:	cf 93       	push	r28
 610:	df 93       	push	r29
	uint16_t data = 0;
	uint8_t dataOut = 0xd0 + (channel << 5);
 612:	82 95       	swap	r24
 614:	88 0f       	add	r24, r24
 616:	80 7e       	andi	r24, 0xE0	; 224
 618:	c0 ed       	ldi	r28, 0xD0	; 208
 61a:	c8 0f       	add	r28, r24

	ChipSelect(CS_ADC, ACTIVE);
 61c:	61 e0       	ldi	r22, 0x01	; 1
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	b9 df       	rcall	.-142    	; 0x594 <ChipSelect>
	SPI_MasterTransmit(dataOut);
 622:	8c 2f       	mov	r24, r28
 624:	b2 df       	rcall	.-156    	; 0x58a <SPI_MasterTransmit>
	data = SPDR << 8;
 626:	8e b5       	in	r24, 0x2e	; 46
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	c9 2f       	mov	r28, r25
 62c:	d8 2f       	mov	r29, r24
	SPI_MasterTransmit(0x00);
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	ac df       	rcall	.-168    	; 0x58a <SPI_MasterTransmit>
	data |= SPDR;
 632:	8e b5       	in	r24, 0x2e	; 46
 634:	c8 2b       	or	r28, r24
	ChipSelect(CS_ADC, INACTIVE);
 636:	60 e0       	ldi	r22, 0x00	; 0
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	ac df       	rcall	.-168    	; 0x594 <ChipSelect>

	return data;
}
 63c:	ce 01       	movw	r24, r28
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	08 95       	ret

00000644 <__udivmodhi4>:
 644:	aa 1b       	sub	r26, r26
 646:	bb 1b       	sub	r27, r27
 648:	51 e1       	ldi	r21, 0x11	; 17
 64a:	07 c0       	rjmp	.+14     	; 0x65a <__udivmodhi4_ep>

0000064c <__udivmodhi4_loop>:
 64c:	aa 1f       	adc	r26, r26
 64e:	bb 1f       	adc	r27, r27
 650:	a6 17       	cp	r26, r22
 652:	b7 07       	cpc	r27, r23
 654:	10 f0       	brcs	.+4      	; 0x65a <__udivmodhi4_ep>
 656:	a6 1b       	sub	r26, r22
 658:	b7 0b       	sbc	r27, r23

0000065a <__udivmodhi4_ep>:
 65a:	88 1f       	adc	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	5a 95       	dec	r21
 660:	a9 f7       	brne	.-22     	; 0x64c <__udivmodhi4_loop>
 662:	80 95       	com	r24
 664:	90 95       	com	r25
 666:	bc 01       	movw	r22, r24
 668:	cd 01       	movw	r24, r26
 66a:	08 95       	ret

0000066c <__divmodhi4>:
 66c:	97 fb       	bst	r25, 7
 66e:	07 2e       	mov	r0, r23
 670:	16 f4       	brtc	.+4      	; 0x676 <__divmodhi4+0xa>
 672:	00 94       	com	r0
 674:	06 d0       	rcall	.+12     	; 0x682 <__divmodhi4_neg1>
 676:	77 fd       	sbrc	r23, 7
 678:	08 d0       	rcall	.+16     	; 0x68a <__divmodhi4_neg2>
 67a:	e4 df       	rcall	.-56     	; 0x644 <__udivmodhi4>
 67c:	07 fc       	sbrc	r0, 7
 67e:	05 d0       	rcall	.+10     	; 0x68a <__divmodhi4_neg2>
 680:	3e f4       	brtc	.+14     	; 0x690 <__divmodhi4_exit>

00000682 <__divmodhi4_neg1>:
 682:	90 95       	com	r25
 684:	81 95       	neg	r24
 686:	9f 4f       	sbci	r25, 0xFF	; 255
 688:	08 95       	ret

0000068a <__divmodhi4_neg2>:
 68a:	70 95       	com	r23
 68c:	61 95       	neg	r22
 68e:	7f 4f       	sbci	r23, 0xFF	; 255

00000690 <__divmodhi4_exit>:
 690:	08 95       	ret

00000692 <__ashldi3>:
 692:	0f 93       	push	r16
 694:	08 30       	cpi	r16, 0x08	; 8
 696:	90 f0       	brcs	.+36     	; 0x6bc <__ashldi3+0x2a>
 698:	98 2f       	mov	r25, r24
 69a:	87 2f       	mov	r24, r23
 69c:	76 2f       	mov	r23, r22
 69e:	65 2f       	mov	r22, r21
 6a0:	54 2f       	mov	r21, r20
 6a2:	43 2f       	mov	r20, r19
 6a4:	32 2f       	mov	r19, r18
 6a6:	22 27       	eor	r18, r18
 6a8:	08 50       	subi	r16, 0x08	; 8
 6aa:	f4 cf       	rjmp	.-24     	; 0x694 <__ashldi3+0x2>
 6ac:	22 0f       	add	r18, r18
 6ae:	33 1f       	adc	r19, r19
 6b0:	44 1f       	adc	r20, r20
 6b2:	55 1f       	adc	r21, r21
 6b4:	66 1f       	adc	r22, r22
 6b6:	77 1f       	adc	r23, r23
 6b8:	88 1f       	adc	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	0a 95       	dec	r16
 6be:	b2 f7       	brpl	.-20     	; 0x6ac <__ashldi3+0x1a>
 6c0:	0f 91       	pop	r16
 6c2:	08 95       	ret

000006c4 <_exit>:
 6c4:	f8 94       	cli

000006c6 <__stop_program>:
 6c6:	ff cf       	rjmp	.-2      	; 0x6c6 <__stop_program>
