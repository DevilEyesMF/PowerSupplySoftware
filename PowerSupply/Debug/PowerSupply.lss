
PowerSupply.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000590  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  00000604  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001096  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000922  00000000  00000000  0000179e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000804  00000000  00000000  000020c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  000028c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000599  00000000  00000000  00002a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000884  00000000  00000000  00003031  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000038b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	27 c0       	rjmp	.+78     	; 0x50 <__ctors_end>
   2:	36 c0       	rjmp	.+108    	; 0x70 <__bad_interrupt>
   4:	35 c0       	rjmp	.+106    	; 0x70 <__bad_interrupt>
   6:	34 c0       	rjmp	.+104    	; 0x70 <__bad_interrupt>
   8:	ac c1       	rjmp	.+856    	; 0x362 <__vector_4>
   a:	32 c0       	rjmp	.+100    	; 0x70 <__bad_interrupt>
   c:	31 c0       	rjmp	.+98     	; 0x70 <__bad_interrupt>
   e:	30 c0       	rjmp	.+96     	; 0x70 <__bad_interrupt>
  10:	2f c0       	rjmp	.+94     	; 0x70 <__bad_interrupt>
  12:	2e c0       	rjmp	.+92     	; 0x70 <__bad_interrupt>
  14:	2d c0       	rjmp	.+90     	; 0x70 <__bad_interrupt>
  16:	2c c0       	rjmp	.+88     	; 0x70 <__bad_interrupt>
  18:	2b c0       	rjmp	.+86     	; 0x70 <__bad_interrupt>
  1a:	2a c0       	rjmp	.+84     	; 0x70 <__bad_interrupt>
  1c:	29 c0       	rjmp	.+82     	; 0x70 <__bad_interrupt>
  1e:	28 c0       	rjmp	.+80     	; 0x70 <__bad_interrupt>
  20:	27 c0       	rjmp	.+78     	; 0x70 <__bad_interrupt>
  22:	26 c0       	rjmp	.+76     	; 0x70 <__bad_interrupt>
  24:	25 c0       	rjmp	.+74     	; 0x70 <__bad_interrupt>
  26:	24 c0       	rjmp	.+72     	; 0x70 <__bad_interrupt>
  28:	23 c0       	rjmp	.+70     	; 0x70 <__bad_interrupt>
  2a:	22 c0       	rjmp	.+68     	; 0x70 <__bad_interrupt>
  2c:	21 c0       	rjmp	.+66     	; 0x70 <__bad_interrupt>
  2e:	20 c0       	rjmp	.+64     	; 0x70 <__bad_interrupt>
  30:	1f c0       	rjmp	.+62     	; 0x70 <__bad_interrupt>
  32:	1e c0       	rjmp	.+60     	; 0x70 <__bad_interrupt>
  34:	c1 c1       	rjmp	.+898    	; 0x3b8 <__vector_4+0x56>
  36:	cc c1       	rjmp	.+920    	; 0x3d0 <__vector_4+0x6e>
  38:	d1 c1       	rjmp	.+930    	; 0x3dc <__vector_4+0x7a>
  3a:	d7 c1       	rjmp	.+942    	; 0x3ea <__vector_4+0x88>
  3c:	ef c1       	rjmp	.+990    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
  3e:	f4 c1       	rjmp	.+1000   	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
  40:	f9 c1       	rjmp	.+1010   	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
  42:	1a c2       	rjmp	.+1076   	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
  44:	25 c2       	rjmp	.+1098   	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
  46:	2a c2       	rjmp	.+1108   	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
  48:	30 c2       	rjmp	.+1120   	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
  4a:	48 c2       	rjmp	.+1168   	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
  4c:	4d c2       	rjmp	.+1178   	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
  4e:	52 c2       	rjmp	.+1188   	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>

00000050 <__ctors_end>:
  50:	11 24       	eor	r1, r1
  52:	1f be       	out	0x3f, r1	; 63
  54:	cf ef       	ldi	r28, 0xFF	; 255
  56:	d2 e0       	ldi	r29, 0x02	; 2
  58:	de bf       	out	0x3e, r29	; 62
  5a:	cd bf       	out	0x3d, r28	; 61

0000005c <__do_clear_bss>:
  5c:	21 e0       	ldi	r18, 0x01	; 1
  5e:	a0 e0       	ldi	r26, 0x00	; 0
  60:	b1 e0       	ldi	r27, 0x01	; 1
  62:	01 c0       	rjmp	.+2      	; 0x66 <.do_clear_bss_start>

00000064 <.do_clear_bss_loop>:
  64:	1d 92       	st	X+, r1

00000066 <.do_clear_bss_start>:
  66:	aa 30       	cpi	r26, 0x0A	; 10
  68:	b2 07       	cpc	r27, r18
  6a:	e1 f7       	brne	.-8      	; 0x64 <.do_clear_bss_loop>
  6c:	42 d1       	rcall	.+644    	; 0x2f2 <main>
  6e:	8e c2       	rjmp	.+1308   	; 0x58c <_exit>

00000070 <__bad_interrupt>:
  70:	c7 cf       	rjmp	.-114    	; 0x0 <__vectors>

00000072 <ClockPrescalerSet1>:
	SPI_MasterTransmit(0x00);
	data |= SPDR;
	ChipSelect(CS_ADC, INACTIVE);

	return data;
}
  72:	88 ed       	ldi	r24, 0xD8	; 216
  74:	86 bf       	out	0x36, r24	; 54
  76:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fe061>
  7a:	08 95       	ret

0000007c <IOInit>:
  7c:	87 e0       	ldi	r24, 0x07	; 7
  7e:	81 b9       	out	0x01, r24	; 1
  80:	15 b8       	out	0x05, r1	; 5
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	89 b9       	out	0x09, r24	; 9
  86:	08 95       	ret

00000088 <SPI_MasterInit>:
  88:	89 e0       	ldi	r24, 0x09	; 9
  8a:	8d b9       	out	0x0d, r24	; 13
  8c:	81 e5       	ldi	r24, 0x51	; 81
  8e:	8c bd       	out	0x2c, r24	; 44
  90:	08 95       	ret

00000092 <DisplayEnablePulse>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	8d e0       	ldi	r24, 0x0D	; 13
  94:	8a 95       	dec	r24
  96:	f1 f7       	brne	.-4      	; 0x94 <DisplayEnablePulse+0x2>
  98:	00 00       	nop
}

void DisplayEnablePulse()
{
	_delay_us(5);
	BIT_SET(DISPLAY_CTL, DISPLAY_EN);
  9a:	86 b1       	in	r24, 0x06	; 6
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	86 b9       	out	0x06, r24	; 6
  a0:	8d e0       	ldi	r24, 0x0D	; 13
  a2:	8a 95       	dec	r24
  a4:	f1 f7       	brne	.-4      	; 0xa2 <DisplayEnablePulse+0x10>
  a6:	00 00       	nop
	_delay_us(5);
	BIT_CLEAR(DISPLAY_CTL, DISPLAY_EN);
  a8:	86 b1       	in	r24, 0x06	; 6
  aa:	8d 7f       	andi	r24, 0xFD	; 253
  ac:	86 b9       	out	0x06, r24	; 6
  ae:	8a e6       	ldi	r24, 0x6A	; 106
  b0:	8a 95       	dec	r24
  b2:	f1 f7       	brne	.-4      	; 0xb0 <DisplayEnablePulse+0x1e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <DisplayEnablePulse+0x24>
  b6:	08 95       	ret

000000b8 <DisplayInit>:

	return data;
}

void DisplayInit()
{
  b8:	cf 93       	push	r28
	//BIT_CLEAR(DISPLAY_CTL, DISPLAY_RW);
	BIT_CLEAR(DISPLAY_CTL, DISPLAY_RS);
  ba:	86 b1       	in	r24, 0x06	; 6
  bc:	8e 7f       	andi	r24, 0xFE	; 254
  be:	86 b9       	out	0x06, r24	; 6
	BIT_CLEAR(DISPLAY_CTL, DISPLAY_EN);
  c0:	86 b1       	in	r24, 0x06	; 6
  c2:	8d 7f       	andi	r24, 0xFD	; 253
  c4:	86 b9       	out	0x06, r24	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	8f e2       	ldi	r24, 0x2F	; 47
  c8:	95 e7       	ldi	r25, 0x75	; 117
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <DisplayInit+0x12>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <DisplayInit+0x18>
  d0:	00 00       	nop
	 * bit 4: Data bus length = 8
	 * bit 3: Number of lines = 2
	 * bit 2: font size = 5x8
	 */
	_delay_ms(15);
	DISPLAY_DATA = 0b00111000;
  d2:	c8 e3       	ldi	r28, 0x38	; 56
  d4:	ca b9       	out	0x0a, r28	; 10
	DisplayEnablePulse();
  d6:	dd df       	rcall	.-70     	; 0x92 <DisplayEnablePulse>
  d8:	8f e0       	ldi	r24, 0x0F	; 15
  da:	97 e2       	ldi	r25, 0x27	; 39
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <DisplayInit+0x24>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <DisplayInit+0x2a>
  e2:	00 00       	nop

	_delay_ms(5);
	DISPLAY_DATA = 0b00111000;
  e4:	ca b9       	out	0x0a, r28	; 10
	DisplayEnablePulse();
  e6:	d5 df       	rcall	.-86     	; 0x92 <DisplayEnablePulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	87 ec       	ldi	r24, 0xC7	; 199
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <DisplayInit+0x34>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <DisplayInit+0x3a>
  f2:	00 00       	nop

	_delay_us(100);
	DISPLAY_DATA = 0b00111000;
  f4:	ca b9       	out	0x0a, r28	; 10
	DisplayEnablePulse();
  f6:	cd df       	rcall	.-102    	; 0x92 <DisplayEnablePulse>
	 * Display on
	 * bit 2: Display on
	 * bit 1: Cursor
	 * bit 0: Cursor position
	 */
	DISPLAY_DATA = 0b00001101;
  f8:	8d e0       	ldi	r24, 0x0D	; 13
  fa:	8a b9       	out	0x0a, r24	; 10
	DisplayEnablePulse();
  fc:	ca df       	rcall	.-108    	; 0x92 <DisplayEnablePulse>
	/*
	 * Entry mode set
	 * bit 1: Direction
	 * bit 0: Display shift
	 */
	DISPLAY_DATA = 0b00000100;
  fe:	84 e0       	ldi	r24, 0x04	; 4
 100:	8a b9       	out	0x0a, r24	; 10
	DisplayEnablePulse();
 102:	c7 df       	rcall	.-114    	; 0x92 <DisplayEnablePulse>

	/* Display clear */
	DISPLAY_DATA = 0b00000001;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	8a b9       	out	0x0a, r24	; 10
	DisplayEnablePulse();
 108:	c4 df       	rcall	.-120    	; 0x92 <DisplayEnablePulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	8f e9       	ldi	r24, 0x9F	; 159
 10c:	9f e0       	ldi	r25, 0x0F	; 15
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
 112:	00 c0       	rjmp	.+0      	; 0x114 <__EEPROM_REGION_LENGTH__+0x14>
 114:	00 00       	nop
	_delay_ms(2);
}
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <DisplaySetDDRAM>:
	DisplayWriteChar('A');
}

void DisplaySetDDRAM(uint8_t addressRAM)
{
	BIT_CLEAR(DISPLAY_CTL, DISPLAY_RS);
 11a:	96 b1       	in	r25, 0x06	; 6
 11c:	9e 7f       	andi	r25, 0xFE	; 254
 11e:	96 b9       	out	0x06, r25	; 6

	DISPLAY_DATA = addressRAM | 0b10000000;
 120:	80 68       	ori	r24, 0x80	; 128
 122:	8a b9       	out	0x0a, r24	; 10
	DisplayEnablePulse();
 124:	b6 df       	rcall	.-148    	; 0x92 <DisplayEnablePulse>
 126:	08 95       	ret

00000128 <DisplayWriteChar>:
}

void DisplayWriteChar(char c)
{
	BIT_SET(DISPLAY_CTL, DISPLAY_RS);
 128:	96 b1       	in	r25, 0x06	; 6
 12a:	91 60       	ori	r25, 0x01	; 1
 12c:	96 b9       	out	0x06, r25	; 6

	DISPLAY_DATA = c;
 12e:	8a b9       	out	0x0a, r24	; 10
	DisplayEnablePulse();
 130:	b0 df       	rcall	.-160    	; 0x92 <DisplayEnablePulse>
 132:	08 95       	ret

00000134 <IntegerToASCII>:
	BIT_CLEAR(DISPLAY_CTL, DISPLAY_EN);
	_delay_us(40);
}

void IntegerToASCII(uint16_t number, char *c_number)
{
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	e8 2f       	mov	r30, r24
 142:	49 2f       	mov	r20, r25
 144:	7b 01       	movw	r14, r22
	/* Separate the digits */
    for (int i = 0, j = 10000; i < 5; i++, j/=10)
 146:	c0 e1       	ldi	r28, 0x10	; 16
 148:	d7 e2       	ldi	r29, 0x27	; 39
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	13 c0       	rjmp	.+38     	; 0x176 <IntegerToASCII+0x42>
    {
	    c_number[i] = number / j + 0x30; // + 0x30 to convert to ASCII
 150:	87 01       	movw	r16, r14
 152:	02 0f       	add	r16, r18
 154:	13 1f       	adc	r17, r19
 156:	8e 2f       	mov	r24, r30
 158:	94 2f       	mov	r25, r20
 15a:	be 01       	movw	r22, r28
 15c:	f0 d1       	rcall	.+992    	; 0x53e <__udivmodhi4>
 15e:	60 5d       	subi	r22, 0xD0	; 208
 160:	f8 01       	movw	r30, r16
 162:	60 83       	st	Z, r22
	    number %= j;
 164:	e8 2f       	mov	r30, r24
 166:	49 2f       	mov	r20, r25
}

void IntegerToASCII(uint16_t number, char *c_number)
{
	/* Separate the digits */
    for (int i = 0, j = 10000; i < 5; i++, j/=10)
 168:	2f 5f       	subi	r18, 0xFF	; 255
 16a:	3f 4f       	sbci	r19, 0xFF	; 255
 16c:	ce 01       	movw	r24, r28
 16e:	6a e0       	ldi	r22, 0x0A	; 10
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	f9 d1       	rcall	.+1010   	; 0x566 <__divmodhi4>
 174:	eb 01       	movw	r28, r22
 176:	25 30       	cpi	r18, 0x05	; 5
 178:	31 05       	cpc	r19, r1
 17a:	54 f3       	brlt	.-44     	; 0x150 <IntegerToASCII+0x1c>
    {
	    c_number[i] = number / j + 0x30; // + 0x30 to convert to ASCII
	    number %= j;
    }
}
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	0f 91       	pop	r16
 184:	ff 90       	pop	r15
 186:	ef 90       	pop	r14
 188:	08 95       	ret

0000018a <FormatValue>:

void FormatValue(char c[6])
{
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	dc 01       	movw	r26, r24
	/* Swap first zero with space if needed */
	if (c[0] == '0')
 190:	8c 91       	ld	r24, X
 192:	80 33       	cpi	r24, 0x30	; 48
 194:	11 f4       	brne	.+4      	; 0x19a <FormatValue+0x10>
	{
		c[0] = ' ';
 196:	80 e2       	ldi	r24, 0x20	; 32
 198:	8c 93       	st	X, r24
	    number %= j;
    }
}

void FormatValue(char c[6])
{
 19a:	25 e0       	ldi	r18, 0x05	; 5
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	09 c0       	rjmp	.+18     	; 0x1b2 <FormatValue+0x28>
		c[0] = ' ';
	}

	for (int i = 5; i > 2; i--)
	{
		c[i] = c[i-1];
 1a0:	fd 01       	movw	r30, r26
 1a2:	e2 0f       	add	r30, r18
 1a4:	f3 1f       	adc	r31, r19
 1a6:	ef 01       	movw	r28, r30
 1a8:	21 97       	sbiw	r28, 0x01	; 1
 1aa:	88 81       	ld	r24, Y
 1ac:	80 83       	st	Z, r24
	if (c[0] == '0')
	{
		c[0] = ' ';
	}

	for (int i = 5; i > 2; i--)
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	31 09       	sbc	r19, r1
 1b2:	23 30       	cpi	r18, 0x03	; 3
 1b4:	31 05       	cpc	r19, r1
 1b6:	a4 f7       	brge	.-24     	; 0x1a0 <FormatValue+0x16>
	{
		c[i] = c[i-1];
	}

	c[2] = ',';
 1b8:	8c e2       	ldi	r24, 0x2C	; 44
 1ba:	12 96       	adiw	r26, 0x02	; 2
 1bc:	8c 93       	st	X, r24
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <DisplayUpdate>:
	DisplayEnablePulse();
	_delay_ms(2);
}

void DisplayUpdate(uint16_t setVoltage, uint16_t measuredVoltage, uint16_t setCurrent, uint16_t measuredCurrent)
{
 1c4:	cf 92       	push	r12
 1c6:	df 92       	push	r13
 1c8:	ef 92       	push	r14
 1ca:	ff 92       	push	r15
 1cc:	0f 93       	push	r16
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	cd b7       	in	r28, 0x3d	; 61
 1d6:	de b7       	in	r29, 0x3e	; 62
 1d8:	68 97       	sbiw	r28, 0x18	; 24
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	f8 94       	cli
 1de:	de bf       	out	0x3e, r29	; 62
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	cd bf       	out	0x3d, r28	; 61
 1e4:	6b 01       	movw	r12, r22
 1e6:	7a 01       	movw	r14, r20
 1e8:	89 01       	movw	r16, r18
	/* Declare local char arrays for ASCII codes */
	char c_setVoltage[6], c_measuredVoltage[6], c_setCurrent[6], c_measuredCurrent[6];

	/* Transform values to ASCII */
	IntegerToASCII(setVoltage, c_setVoltage);
 1ea:	be 01       	movw	r22, r28
 1ec:	6f 5f       	subi	r22, 0xFF	; 255
 1ee:	7f 4f       	sbci	r23, 0xFF	; 255
 1f0:	a1 df       	rcall	.-190    	; 0x134 <IntegerToASCII>
	IntegerToASCII(measuredVoltage, c_measuredVoltage);
 1f2:	be 01       	movw	r22, r28
 1f4:	69 5f       	subi	r22, 0xF9	; 249
 1f6:	7f 4f       	sbci	r23, 0xFF	; 255
 1f8:	c6 01       	movw	r24, r12
 1fa:	9c df       	rcall	.-200    	; 0x134 <IntegerToASCII>
	IntegerToASCII(setCurrent, c_setCurrent);
 1fc:	be 01       	movw	r22, r28
 1fe:	63 5f       	subi	r22, 0xF3	; 243
 200:	7f 4f       	sbci	r23, 0xFF	; 255
 202:	c7 01       	movw	r24, r14
 204:	97 df       	rcall	.-210    	; 0x134 <IntegerToASCII>
	IntegerToASCII(measuredCurrent, c_measuredCurrent);
 206:	be 01       	movw	r22, r28
 208:	6d 5e       	subi	r22, 0xED	; 237
 20a:	7f 4f       	sbci	r23, 0xFF	; 255
 20c:	c8 01       	movw	r24, r16
 20e:	92 df       	rcall	.-220    	; 0x134 <IntegerToASCII>

	/* Format the strings for the LCD */
	FormatValue(c_setVoltage);
 210:	ce 01       	movw	r24, r28
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	ba df       	rcall	.-140    	; 0x18a <FormatValue>
	FormatValue(c_measuredVoltage);
 216:	ce 01       	movw	r24, r28
 218:	07 96       	adiw	r24, 0x07	; 7
 21a:	b7 df       	rcall	.-146    	; 0x18a <FormatValue>
	FormatValue(c_setCurrent);
 21c:	ce 01       	movw	r24, r28
 21e:	0d 96       	adiw	r24, 0x0d	; 13
 220:	b4 df       	rcall	.-152    	; 0x18a <FormatValue>
	FormatValue(c_measuredCurrent);
 222:	ce 01       	movw	r24, r28
 224:	43 96       	adiw	r24, 0x13	; 19
 226:	b1 df       	rcall	.-158    	; 0x18a <FormatValue>
	
	BIT_CLEAR(DISPLAY_CTL, DISPLAY_RS);
 228:	86 b1       	in	r24, 0x06	; 6
 22a:	8e 7f       	andi	r24, 0xFE	; 254
 22c:	86 b9       	out	0x06, r24	; 6
	DISPLAY_DATA = 0b10;
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	8a b9       	out	0x0a, r24	; 10
	DisplayEnablePulse();
 232:	2f df       	rcall	.-418    	; 0x92 <DisplayEnablePulse>

	/* Print set voltage */
	DisplaySetDDRAM(ADDR_VOLTAGE_SET);
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	71 df       	rcall	.-286    	; 0x11a <DisplaySetDDRAM>

	for (int i = 0; i < 6; i++)
 238:	00 e0       	ldi	r16, 0x00	; 0
 23a:	10 e0       	ldi	r17, 0x00	; 0
 23c:	0a c0       	rjmp	.+20     	; 0x252 <__DATA_REGION_LENGTH__+0x52>
	{
		DisplayWriteChar(c_setVoltage[i]);
 23e:	e1 e0       	ldi	r30, 0x01	; 1
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	ec 0f       	add	r30, r28
 244:	fd 1f       	adc	r31, r29
 246:	e0 0f       	add	r30, r16
 248:	f1 1f       	adc	r31, r17
 24a:	80 81       	ld	r24, Z
 24c:	6d df       	rcall	.-294    	; 0x128 <DisplayWriteChar>
	DisplayEnablePulse();

	/* Print set voltage */
	DisplaySetDDRAM(ADDR_VOLTAGE_SET);

	for (int i = 0; i < 6; i++)
 24e:	0f 5f       	subi	r16, 0xFF	; 255
 250:	1f 4f       	sbci	r17, 0xFF	; 255
 252:	06 30       	cpi	r16, 0x06	; 6
 254:	11 05       	cpc	r17, r1
 256:	9c f3       	brlt	.-26     	; 0x23e <__DATA_REGION_LENGTH__+0x3e>
	{
		DisplayWriteChar(c_setVoltage[i]);
	}
	DisplayWriteChar('V');
 258:	86 e5       	ldi	r24, 0x56	; 86
 25a:	66 df       	rcall	.-308    	; 0x128 <DisplayWriteChar>

	/* Print 2 spaces */

	/* Print measured voltage */
	DisplaySetDDRAM(ADDR_VOLTAGE_MEAS);
 25c:	89 e0       	ldi	r24, 0x09	; 9
 25e:	5d df       	rcall	.-326    	; 0x11a <DisplaySetDDRAM>

	for (int i = 0; i < 6; i++)
 260:	00 e0       	ldi	r16, 0x00	; 0
 262:	10 e0       	ldi	r17, 0x00	; 0
 264:	0a c0       	rjmp	.+20     	; 0x27a <__DATA_REGION_LENGTH__+0x7a>
	{
		DisplayWriteChar(c_measuredVoltage[i]);
 266:	e7 e0       	ldi	r30, 0x07	; 7
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	ec 0f       	add	r30, r28
 26c:	fd 1f       	adc	r31, r29
 26e:	e0 0f       	add	r30, r16
 270:	f1 1f       	adc	r31, r17
 272:	80 81       	ld	r24, Z
 274:	59 df       	rcall	.-334    	; 0x128 <DisplayWriteChar>
	/* Print 2 spaces */

	/* Print measured voltage */
	DisplaySetDDRAM(ADDR_VOLTAGE_MEAS);

	for (int i = 0; i < 6; i++)
 276:	0f 5f       	subi	r16, 0xFF	; 255
 278:	1f 4f       	sbci	r17, 0xFF	; 255
 27a:	06 30       	cpi	r16, 0x06	; 6
 27c:	11 05       	cpc	r17, r1
 27e:	9c f3       	brlt	.-26     	; 0x266 <__DATA_REGION_LENGTH__+0x66>
	{
		DisplayWriteChar(c_measuredVoltage[i]);
	}
	DisplayWriteChar('V');
 280:	86 e5       	ldi	r24, 0x56	; 86
 282:	52 df       	rcall	.-348    	; 0x128 <DisplayWriteChar>

	/* new line */

	/* Print set current */
	DisplaySetDDRAM(ADDR_CURRENT_SET);
 284:	80 e4       	ldi	r24, 0x40	; 64
 286:	49 df       	rcall	.-366    	; 0x11a <DisplaySetDDRAM>

	for (int i = 0; i < 6; i++)
 288:	00 e0       	ldi	r16, 0x00	; 0
 28a:	10 e0       	ldi	r17, 0x00	; 0
 28c:	0a c0       	rjmp	.+20     	; 0x2a2 <__DATA_REGION_LENGTH__+0xa2>
	{
		DisplayWriteChar(c_setCurrent[i]);
 28e:	ed e0       	ldi	r30, 0x0D	; 13
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	ec 0f       	add	r30, r28
 294:	fd 1f       	adc	r31, r29
 296:	e0 0f       	add	r30, r16
 298:	f1 1f       	adc	r31, r17
 29a:	80 81       	ld	r24, Z
 29c:	45 df       	rcall	.-374    	; 0x128 <DisplayWriteChar>
	/* new line */

	/* Print set current */
	DisplaySetDDRAM(ADDR_CURRENT_SET);

	for (int i = 0; i < 6; i++)
 29e:	0f 5f       	subi	r16, 0xFF	; 255
 2a0:	1f 4f       	sbci	r17, 0xFF	; 255
 2a2:	06 30       	cpi	r16, 0x06	; 6
 2a4:	11 05       	cpc	r17, r1
 2a6:	9c f3       	brlt	.-26     	; 0x28e <__DATA_REGION_LENGTH__+0x8e>
	{
		DisplayWriteChar(c_setCurrent[i]);
	}
	DisplayWriteChar('A');
 2a8:	81 e4       	ldi	r24, 0x41	; 65
 2aa:	3e df       	rcall	.-388    	; 0x128 <DisplayWriteChar>

	/* Print 2 spaces */

	/* Print measured current */
	DisplaySetDDRAM(ADDR_CURRENT_MEAS);
 2ac:	89 e4       	ldi	r24, 0x49	; 73
 2ae:	35 df       	rcall	.-406    	; 0x11a <DisplaySetDDRAM>

	for (int i = 0; i < 6; i++)
 2b0:	00 e0       	ldi	r16, 0x00	; 0
 2b2:	10 e0       	ldi	r17, 0x00	; 0
 2b4:	0a c0       	rjmp	.+20     	; 0x2ca <__DATA_REGION_LENGTH__+0xca>
	{
		DisplayWriteChar(c_measuredCurrent[i]);
 2b6:	e3 e1       	ldi	r30, 0x13	; 19
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	ec 0f       	add	r30, r28
 2bc:	fd 1f       	adc	r31, r29
 2be:	e0 0f       	add	r30, r16
 2c0:	f1 1f       	adc	r31, r17
 2c2:	80 81       	ld	r24, Z
 2c4:	31 df       	rcall	.-414    	; 0x128 <DisplayWriteChar>
	/* Print 2 spaces */

	/* Print measured current */
	DisplaySetDDRAM(ADDR_CURRENT_MEAS);

	for (int i = 0; i < 6; i++)
 2c6:	0f 5f       	subi	r16, 0xFF	; 255
 2c8:	1f 4f       	sbci	r17, 0xFF	; 255
 2ca:	06 30       	cpi	r16, 0x06	; 6
 2cc:	11 05       	cpc	r17, r1
 2ce:	9c f3       	brlt	.-26     	; 0x2b6 <__DATA_REGION_LENGTH__+0xb6>
	{
		DisplayWriteChar(c_measuredCurrent[i]);
	}
	DisplayWriteChar('A');
 2d0:	81 e4       	ldi	r24, 0x41	; 65
 2d2:	2a df       	rcall	.-428    	; 0x128 <DisplayWriteChar>
}
 2d4:	68 96       	adiw	r28, 0x18	; 24
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	f8 94       	cli
 2da:	de bf       	out	0x3e, r29	; 62
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	cd bf       	out	0x3d, r28	; 61
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	ff 90       	pop	r15
 2ea:	ef 90       	pop	r14
 2ec:	df 90       	pop	r13
 2ee:	cf 90       	pop	r12
 2f0:	08 95       	ret

000002f2 <main>:

/* main */
int main(void)
{	
	/* f clock -> 8 MHz */
	ClockPrescalerSet1();
 2f2:	bf de       	rcall	.-642    	; 0x72 <ClockPrescalerSet1>

	/* Initialize IO */
	IOInit();
 2f4:	c3 de       	rcall	.-634    	; 0x7c <IOInit>

	/* Initialize SPI */
	SPI_MasterInit();
 2f6:	c8 de       	rcall	.-624    	; 0x88 <SPI_MasterInit>
	DDRB = 3; // tmp
 2f8:	83 e0       	ldi	r24, 0x03	; 3
 2fa:	85 b9       	out	0x05, r24	; 5

	/* Initialize Display */
	DisplayInit();
 2fc:	dd de       	rcall	.-582    	; 0xb8 <DisplayInit>
	
	// TODO
	BIT_SET(PCMSK1, PCINT10);
 2fe:	ec e6       	ldi	r30, 0x6C	; 108
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 81       	ld	r24, Z
 304:	84 60       	ori	r24, 0x04	; 4
 306:	80 83       	st	Z, r24
	BIT_SET(PCMSK1, PCINT11);
 308:	80 81       	ld	r24, Z
 30a:	88 60       	ori	r24, 0x08	; 8
 30c:	80 83       	st	Z, r24
	BIT_SET(PCMSK1, PCINT12);
 30e:	80 81       	ld	r24, Z
 310:	80 61       	ori	r24, 0x10	; 16
 312:	80 83       	st	Z, r24
	BIT_SET(PCMSK1, PCINT13);
 314:	80 81       	ld	r24, Z
 316:	80 62       	ori	r24, 0x20	; 32
 318:	80 83       	st	Z, r24
	BIT_SET(PCICR, PCIE1);
 31a:	e8 e6       	ldi	r30, 0x68	; 104
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	82 60       	ori	r24, 0x02	; 2
 322:	80 83       	st	Z, r24
	
	sei();
 324:	78 94       	sei
	
	setVoltage = 10000;
 326:	80 e1       	ldi	r24, 0x10	; 16
 328:	97 e2       	ldi	r25, 0x27	; 39
 32a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <setVoltage+0x1>
 32e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <setVoltage>
	setCurrent = 1000;
 332:	88 ee       	ldi	r24, 0xE8	; 232
 334:	93 e0       	ldi	r25, 0x03	; 3
 336:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <setCurrent+0x1>
 33a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <setCurrent>
		 * only 11 bits are used -> steps of 1 mA
		 */
		//measuredCurrent = ADC_Read(ADC_CURRENT) >> 1;
		
		/* Update the LCD display */
		DisplayUpdate(setVoltage, measuredVoltage, setCurrent, measuredCurrent);
 33e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <measuredCurrent>
 342:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <measuredCurrent+0x1>
 346:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <setCurrent>
 34a:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <setCurrent+0x1>
 34e:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <measuredVoltage>
 352:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <measuredVoltage+0x1>
 356:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <setVoltage>
 35a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <setVoltage+0x1>
 35e:	32 df       	rcall	.-412    	; 0x1c4 <DisplayUpdate>
 360:	ee cf       	rjmp	.-36     	; 0x33e <__stack+0x3f>

00000362 <__vector_4>:

	c[2] = ',';
}

ISR(PCINT1_vect, ISR_BLOCK)
{
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	2f 93       	push	r18
 36e:	3f 93       	push	r19
 370:	4f 93       	push	r20
 372:	5f 93       	push	r21
 374:	8f 93       	push	r24
 376:	9f 93       	push	r25
 378:	af 93       	push	r26
 37a:	bf 93       	push	r27
 37c:	ef 93       	push	r30
 37e:	ff 93       	push	r31
	static uint8_t voltageState = 0;
	static uint8_t currentState = 0;
	uint8_t voltageClkState = BIT_CHECK(ENC_PORT, ENC_VOLTAGE_CLK);
 380:	84 b1       	in	r24, 0x04	; 4
 382:	82 fb       	bst	r24, 2
 384:	22 27       	eor	r18, r18
 386:	20 f9       	bld	r18, 0
	uint8_t voltageDataState = BIT_CHECK(ENC_PORT, ENC_VOLTAGE_DT);
 388:	84 b1       	in	r24, 0x04	; 4
 38a:	83 fb       	bst	r24, 3
 38c:	33 27       	eor	r19, r19
 38e:	30 f9       	bld	r19, 0
	uint8_t currentClkState = BIT_CHECK(ENC_PORT, ENC_CURRENT_CLK);
 390:	84 b1       	in	r24, 0x04	; 4
 392:	84 fb       	bst	r24, 4
 394:	55 27       	eor	r21, r21
 396:	50 f9       	bld	r21, 0
	uint8_t currentDataState = BIT_CHECK(ENC_PORT, ENC_CURRENT_DT);
 398:	84 b1       	in	r24, 0x04	; 4
 39a:	85 fb       	bst	r24, 5
 39c:	44 27       	eor	r20, r20
 39e:	40 f9       	bld	r20, 0
	
	/* Rotary encoder voltage */
	switch (voltageState)
 3a0:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <voltageState.1856>
 3a4:	8e 2f       	mov	r24, r30
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	87 30       	cpi	r24, 0x07	; 7
 3aa:	91 05       	cpc	r25, r1
 3ac:	08 f0       	brcs	.+2      	; 0x3b0 <__vector_4+0x4e>
 3ae:	58 c0       	rjmp	.+176    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 3b0:	fc 01       	movw	r30, r24
 3b2:	e6 5e       	subi	r30, 0xE6	; 230
 3b4:	ff 4f       	sbci	r31, 0xFF	; 255
 3b6:	09 94       	ijmp
	{
		/* Idle state */
		case 0:
		if (!voltageClkState) // CW
 3b8:	21 11       	cpse	r18, r1
 3ba:	04 c0       	rjmp	.+8      	; 0x3c4 <__vector_4+0x62>
		{
			voltageState = 1;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <voltageState.1856>
 3c2:	4e c0       	rjmp	.+156    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		}
		else if (!voltageDataState) // CCW
 3c4:	31 11       	cpse	r19, r1
 3c6:	4c c0       	rjmp	.+152    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		{
			voltageState = 4;
 3c8:	84 e0       	ldi	r24, 0x04	; 4
 3ca:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <voltageState.1856>
 3ce:	48 c0       	rjmp	.+144    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		}
		break;
		
		/* Clockwise rotation */
		case 1:
		if (!voltageDataState)
 3d0:	31 11       	cpse	r19, r1
 3d2:	46 c0       	rjmp	.+140    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		{
			voltageState = 2;
 3d4:	82 e0       	ldi	r24, 0x02	; 2
 3d6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <voltageState.1856>
 3da:	42 c0       	rjmp	.+132    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		}
		break;
		
		case 2:
		if (voltageClkState)
 3dc:	22 23       	and	r18, r18
 3de:	09 f4       	brne	.+2      	; 0x3e2 <__vector_4+0x80>
 3e0:	3f c0       	rjmp	.+126    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		{
			voltageState = 3;
 3e2:	83 e0       	ldi	r24, 0x03	; 3
 3e4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <voltageState.1856>
 3e8:	3b c0       	rjmp	.+118    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		}
		break;
		
		case 3:
		if (voltageClkState && voltageDataState)
 3ea:	22 23       	and	r18, r18
 3ec:	c9 f1       	breq	.+114    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 3ee:	33 23       	and	r19, r19
 3f0:	b9 f1       	breq	.+110    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		{
			voltageState = 0;
 3f2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <voltageState.1856>
			setVoltage += 25;
 3f6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <setVoltage>
 3fa:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <setVoltage+0x1>
 3fe:	49 96       	adiw	r24, 0x19	; 25
 400:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <setVoltage+0x1>
 404:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <setVoltage>
			if (setVoltage > 20000)
 408:	81 32       	cpi	r24, 0x21	; 33
 40a:	9e 44       	sbci	r25, 0x4E	; 78
 40c:	48 f1       	brcs	.+82     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
			{
				setVoltage = 20000;
 40e:	80 e2       	ldi	r24, 0x20	; 32
 410:	9e e4       	ldi	r25, 0x4E	; 78
 412:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <setVoltage+0x1>
 416:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <setVoltage>
 41a:	22 c0       	rjmp	.+68     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		}
		break;
		
		/* Counter clockwise rotation */
		case 4:
		if (!voltageClkState)
 41c:	21 11       	cpse	r18, r1
 41e:	20 c0       	rjmp	.+64     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		{
			voltageState = 5;
 420:	85 e0       	ldi	r24, 0x05	; 5
 422:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <voltageState.1856>
 426:	1c c0       	rjmp	.+56     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		}
		break;
		
		case 5:
		if (voltageDataState)
 428:	33 23       	and	r19, r19
 42a:	d1 f0       	breq	.+52     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		{
			voltageState = 6;
 42c:	86 e0       	ldi	r24, 0x06	; 6
 42e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <voltageState.1856>
 432:	16 c0       	rjmp	.+44     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		}
		break;
		
		case 6:
		if (voltageClkState && voltageDataState)
 434:	22 23       	and	r18, r18
 436:	a1 f0       	breq	.+40     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 438:	33 23       	and	r19, r19
 43a:	91 f0       	breq	.+36     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		{
			voltageState = 0;
 43c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <voltageState.1856>
			setVoltage -= 25;
 440:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <setVoltage>
 444:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <setVoltage+0x1>
 448:	49 97       	sbiw	r24, 0x19	; 25
 44a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <setVoltage+0x1>
 44e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <setVoltage>
			if (setVoltage > 20000)
 452:	81 32       	cpi	r24, 0x21	; 33
 454:	9e 44       	sbci	r25, 0x4E	; 78
 456:	20 f0       	brcs	.+8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
			{
				setVoltage = 0;
 458:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <setVoltage+0x1>
 45c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <setVoltage>
		}
		break;
	}	

	/* Rotary encoder current */
	switch (currentState)
 460:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 464:	8e 2f       	mov	r24, r30
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	87 30       	cpi	r24, 0x07	; 7
 46a:	91 05       	cpc	r25, r1
 46c:	08 f0       	brcs	.+2      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 46e:	58 c0       	rjmp	.+176    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 470:	fc 01       	movw	r30, r24
 472:	ef 5d       	subi	r30, 0xDF	; 223
 474:	ff 4f       	sbci	r31, 0xFF	; 255
 476:	09 94       	ijmp
	{
		/* Idle state */
		case 0:
		if (!currentClkState) // CW
 478:	51 11       	cpse	r21, r1
 47a:	04 c0       	rjmp	.+8      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
		{
			currentState = 1;
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 482:	4e c0       	rjmp	.+156    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
		}
		else if (!currentDataState) // CCW
 484:	41 11       	cpse	r20, r1
 486:	4c c0       	rjmp	.+152    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
		{
			currentState = 4;
 488:	84 e0       	ldi	r24, 0x04	; 4
 48a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 48e:	48 c0       	rjmp	.+144    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
		}
		break;
	
		/* Clockwise rotation */
		case 1:
		if (!currentDataState)
 490:	41 11       	cpse	r20, r1
 492:	46 c0       	rjmp	.+140    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
		{
			currentState = 2;
 494:	82 e0       	ldi	r24, 0x02	; 2
 496:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 49a:	42 c0       	rjmp	.+132    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
		}
		break;
	
		case 2:
		if (currentClkState)
 49c:	55 23       	and	r21, r21
 49e:	09 f4       	brne	.+2      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 4a0:	3f c0       	rjmp	.+126    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
		{
			currentState = 3;
 4a2:	83 e0       	ldi	r24, 0x03	; 3
 4a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 4a8:	3b c0       	rjmp	.+118    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
		}
		break;
	
		case 3:
		if (currentClkState && currentDataState)
 4aa:	55 23       	and	r21, r21
 4ac:	c9 f1       	breq	.+114    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 4ae:	44 23       	and	r20, r20
 4b0:	b9 f1       	breq	.+110    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
		{
			currentState = 0;
 4b2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			setCurrent += 1;
 4b6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <setCurrent>
 4ba:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <setCurrent+0x1>
 4be:	01 96       	adiw	r24, 0x01	; 1
 4c0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <setCurrent+0x1>
 4c4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <setCurrent>
			if (setCurrent > 2000)
 4c8:	81 3d       	cpi	r24, 0xD1	; 209
 4ca:	97 40       	sbci	r25, 0x07	; 7
 4cc:	48 f1       	brcs	.+82     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
			{
				setCurrent = 2000;
 4ce:	80 ed       	ldi	r24, 0xD0	; 208
 4d0:	97 e0       	ldi	r25, 0x07	; 7
 4d2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <setCurrent+0x1>
 4d6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <setCurrent>
 4da:	22 c0       	rjmp	.+68     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
		}
		break;
	
		/* Counter clockwise rotation */
		case 4:
		if (!currentClkState)
 4dc:	51 11       	cpse	r21, r1
 4de:	20 c0       	rjmp	.+64     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
		{
			currentState = 5;
 4e0:	85 e0       	ldi	r24, 0x05	; 5
 4e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 4e6:	1c c0       	rjmp	.+56     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
		}
		break;
	
		case 5:
		if (currentDataState)
 4e8:	44 23       	and	r20, r20
 4ea:	d1 f0       	breq	.+52     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
		{
			currentState = 6;
 4ec:	86 e0       	ldi	r24, 0x06	; 6
 4ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 4f2:	16 c0       	rjmp	.+44     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
		}
		break;
	
		case 6:
		if (currentClkState && currentDataState)
 4f4:	55 23       	and	r21, r21
 4f6:	a1 f0       	breq	.+40     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 4f8:	44 23       	and	r20, r20
 4fa:	91 f0       	breq	.+36     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
		{
			currentState = 0;
 4fc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			setCurrent -= 1;
 500:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <setCurrent>
 504:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <setCurrent+0x1>
 508:	01 97       	sbiw	r24, 0x01	; 1
 50a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <setCurrent+0x1>
 50e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <setCurrent>
			if (setCurrent > 2000)
 512:	81 3d       	cpi	r24, 0xD1	; 209
 514:	97 40       	sbci	r25, 0x07	; 7
 516:	20 f0       	brcs	.+8      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
			{
				setCurrent = 0;
 518:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <setCurrent+0x1>
 51c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <setCurrent>
			}
		}
		break;
	}
 520:	ff 91       	pop	r31
 522:	ef 91       	pop	r30
 524:	bf 91       	pop	r27
 526:	af 91       	pop	r26
 528:	9f 91       	pop	r25
 52a:	8f 91       	pop	r24
 52c:	5f 91       	pop	r21
 52e:	4f 91       	pop	r20
 530:	3f 91       	pop	r19
 532:	2f 91       	pop	r18
 534:	0f 90       	pop	r0
 536:	0f be       	out	0x3f, r0	; 63
 538:	0f 90       	pop	r0
 53a:	1f 90       	pop	r1
 53c:	18 95       	reti

0000053e <__udivmodhi4>:
 53e:	aa 1b       	sub	r26, r26
 540:	bb 1b       	sub	r27, r27
 542:	51 e1       	ldi	r21, 0x11	; 17
 544:	07 c0       	rjmp	.+14     	; 0x554 <__udivmodhi4_ep>

00000546 <__udivmodhi4_loop>:
 546:	aa 1f       	adc	r26, r26
 548:	bb 1f       	adc	r27, r27
 54a:	a6 17       	cp	r26, r22
 54c:	b7 07       	cpc	r27, r23
 54e:	10 f0       	brcs	.+4      	; 0x554 <__udivmodhi4_ep>
 550:	a6 1b       	sub	r26, r22
 552:	b7 0b       	sbc	r27, r23

00000554 <__udivmodhi4_ep>:
 554:	88 1f       	adc	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	5a 95       	dec	r21
 55a:	a9 f7       	brne	.-22     	; 0x546 <__udivmodhi4_loop>
 55c:	80 95       	com	r24
 55e:	90 95       	com	r25
 560:	bc 01       	movw	r22, r24
 562:	cd 01       	movw	r24, r26
 564:	08 95       	ret

00000566 <__divmodhi4>:
 566:	97 fb       	bst	r25, 7
 568:	07 2e       	mov	r0, r23
 56a:	16 f4       	brtc	.+4      	; 0x570 <__divmodhi4+0xa>
 56c:	00 94       	com	r0
 56e:	06 d0       	rcall	.+12     	; 0x57c <__divmodhi4_neg1>
 570:	77 fd       	sbrc	r23, 7
 572:	08 d0       	rcall	.+16     	; 0x584 <__divmodhi4_neg2>
 574:	e4 df       	rcall	.-56     	; 0x53e <__udivmodhi4>
 576:	07 fc       	sbrc	r0, 7
 578:	05 d0       	rcall	.+10     	; 0x584 <__divmodhi4_neg2>
 57a:	3e f4       	brtc	.+14     	; 0x58a <__divmodhi4_exit>

0000057c <__divmodhi4_neg1>:
 57c:	90 95       	com	r25
 57e:	81 95       	neg	r24
 580:	9f 4f       	sbci	r25, 0xFF	; 255
 582:	08 95       	ret

00000584 <__divmodhi4_neg2>:
 584:	70 95       	com	r23
 586:	61 95       	neg	r22
 588:	7f 4f       	sbci	r23, 0xFF	; 255

0000058a <__divmodhi4_exit>:
 58a:	08 95       	ret

0000058c <_exit>:
 58c:	f8 94       	cli

0000058e <__stop_program>:
 58e:	ff cf       	rjmp	.-2      	; 0x58e <__stop_program>
