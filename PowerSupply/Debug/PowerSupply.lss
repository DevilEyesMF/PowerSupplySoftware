
PowerSupply.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000042c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ff8  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f1  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000655  00000000  00000000  00001e65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000188  00000000  00000000  000024bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053a  00000000  00000000  00002644  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007c2  00000000  00000000  00002b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00003340  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	92 d1       	rcall	.+804    	; 0x366 <main>
  42:	f2 c1       	rjmp	.+996    	; 0x428 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <ClockPrescalerSet1>:
    }
}

void ClockPrescalerSet1()
{
	CCP = 0xd8;
  46:	88 ed       	ldi	r24, 0xD8	; 216
  48:	86 bf       	out	0x36, r24	; 54
	CLKPR = 0b00000000;
  4a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fe061>
  4e:	08 95       	ret

00000050 <IOInit>:
}

void IOInit()
{
	DDRA = 0x07;
  50:	87 e0       	ldi	r24, 0x07	; 7
  52:	81 b9       	out	0x01, r24	; 1
	DDRB = 0x00; // CS lijnen uitzoeken
  54:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xff;
  56:	8f ef       	ldi	r24, 0xFF	; 255
  58:	89 b9       	out	0x09, r24	; 9
  5a:	08 95       	ret

0000005c <SPI_MasterInit>:
}

void SPI_MasterInit()
{
	/* MOSI and SCK -> output, RST and MISO -> input */
	DDRD = 0b00001001;
  5c:	89 e0       	ldi	r24, 0x09	; 9
  5e:	8d b9       	out	0x0d, r24	; 13
	/* Enable SPI, Master, clock -> 500 KHz */
	SPCR = 0b01010001;
  60:	81 e5       	ldi	r24, 0x51	; 81
  62:	8c bd       	out	0x2c, r24	; 44
  64:	08 95       	ret

00000066 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(uint8_t data)
{
	/* Start transmission */
	SPDR = data;
  66:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
  68:	0d b4       	in	r0, 0x2d	; 45
  6a:	07 fe       	sbrs	r0, 7
  6c:	fd cf       	rjmp	.-6      	; 0x68 <SPI_MasterTransmit+0x2>
}
  6e:	08 95       	ret

00000070 <ChipSelect>:

void ChipSelect(uint8_t pin, uint8_t state)
{
  70:	0f 93       	push	r16
  72:	08 2f       	mov	r16, r24
	switch (state)
  74:	61 30       	cpi	r22, 0x01	; 1
  76:	89 f4       	brne	.+34     	; 0x9a <ChipSelect+0x2a>
	{
		/* Sink */
		case ACTIVE:
			BIT_SET(DDRB, pin);
  78:	e5 b1       	in	r30, 0x05	; 5
  7a:	21 e0       	ldi	r18, 0x01	; 1
  7c:	30 e0       	ldi	r19, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	50 e0       	ldi	r21, 0x00	; 0
  82:	60 e0       	ldi	r22, 0x00	; 0
  84:	70 e0       	ldi	r23, 0x00	; 0
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	b5 d1       	rcall	.+874    	; 0x3f6 <__ashldi3>
  8c:	e2 2b       	or	r30, r18
  8e:	e5 b9       	out	0x05, r30	; 5
			BIT_CLEAR(PORTB, pin);
  90:	86 b1       	in	r24, 0x06	; 6
  92:	20 95       	com	r18
  94:	28 23       	and	r18, r24
  96:	26 b9       	out	0x06, r18	; 6
			break;
  98:	0d c0       	rjmp	.+26     	; 0xb4 <ChipSelect+0x44>
		/* High-Z */
		case INACTIVE:
		default:
			BIT_CLEAR(DDRB, pin);
  9a:	e5 b1       	in	r30, 0x05	; 5
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	50 e0       	ldi	r21, 0x00	; 0
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	a4 d1       	rcall	.+840    	; 0x3f6 <__ashldi3>
  ae:	20 95       	com	r18
  b0:	e2 23       	and	r30, r18
  b2:	e5 b9       	out	0x05, r30	; 5
			break;
	}
}
  b4:	0f 91       	pop	r16
  b6:	08 95       	ret

000000b8 <DAC_Set>:

void DAC_Set(uint8_t channel, uint16_t data)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
	/* Mask data */
	data &= 0x0fff;
  bc:	eb 01       	movw	r28, r22
  be:	df 70       	andi	r29, 0x0F	; 15
	 * bit 15: Select channel
	 * bit 14: Bypass input buffer
	 * bit 13: Output gain = 1
	 * bit 12: /SHDN bit
	 */
	data |= (0x3000 + (channel << 15));
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	99 27       	eor	r25, r25
  c4:	86 95       	lsr	r24
  c6:	97 95       	ror	r25
  c8:	88 27       	eor	r24, r24
  ca:	90 5d       	subi	r25, 0xD0	; 208
  cc:	c8 2b       	or	r28, r24
  ce:	d9 2b       	or	r29, r25

	/* Transmit data */
	ChipSelect(CS_DAC, ACTIVE);
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	cd df       	rcall	.-102    	; 0x70 <ChipSelect>
	SPI_MasterTransmit(data >> 8);		// high byte
  d6:	8d 2f       	mov	r24, r29
  d8:	c6 df       	rcall	.-116    	; 0x66 <SPI_MasterTransmit>
	SPI_MasterTransmit(data & 0x00ff);	// low byte
  da:	8c 2f       	mov	r24, r28
  dc:	c4 df       	rcall	.-120    	; 0x66 <SPI_MasterTransmit>
	ChipSelect(CS_DAC, INACTIVE);
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	c6 df       	rcall	.-116    	; 0x70 <ChipSelect>
}
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <ADC_Read>:

uint16_t ADC_Read(uint8_t channel)
{
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
	uint16_t data = 0;
	uint8_t dataOut = 0xd0 + (channel << 5);
  ee:	82 95       	swap	r24
  f0:	88 0f       	add	r24, r24
  f2:	80 7e       	andi	r24, 0xE0	; 224
  f4:	c0 ed       	ldi	r28, 0xD0	; 208
  f6:	c8 0f       	add	r28, r24

	ChipSelect(CS_ADC, ACTIVE);
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	b9 df       	rcall	.-142    	; 0x70 <ChipSelect>
	SPI_MasterTransmit(dataOut);
  fe:	8c 2f       	mov	r24, r28
 100:	b2 df       	rcall	.-156    	; 0x66 <SPI_MasterTransmit>
	data = SPDR << 8;
 102:	8e b5       	in	r24, 0x2e	; 46
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	c9 2f       	mov	r28, r25
 108:	d8 2f       	mov	r29, r24
	SPI_MasterTransmit(0x00);
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	ac df       	rcall	.-168    	; 0x66 <SPI_MasterTransmit>
	data |= SPDR;
 10e:	8e b5       	in	r24, 0x2e	; 46
 110:	c8 2b       	or	r28, r24
	ChipSelect(CS_ADC, INACTIVE);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	ac df       	rcall	.-168    	; 0x70 <ChipSelect>

	return data;
}
 118:	ce 01       	movw	r24, r28
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <DisplayEnablePulse>:
	DisplayEnablePulse();
}

void DisplayEnablePulse()
{
	BIT_SET(DISPLAY_CTL, DISPLAY_EN);
 120:	82 b1       	in	r24, 0x02	; 2
 122:	84 60       	ori	r24, 0x04	; 4
 124:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	8a 95       	dec	r24
 12a:	f1 f7       	brne	.-4      	; 0x128 <DisplayEnablePulse+0x8>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <DisplayEnablePulse+0xe>
	_delay_us(1);
	BIT_CLEAR(DISPLAY_CTL, DISPLAY_EN);
 12e:	82 b1       	in	r24, 0x02	; 2
 130:	8b 7f       	andi	r24, 0xFB	; 251
 132:	82 b9       	out	0x02, r24	; 2
 134:	8a e6       	ldi	r24, 0x6A	; 106
 136:	8a 95       	dec	r24
 138:	f1 f7       	brne	.-4      	; 0x136 <DisplayEnablePulse+0x16>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <DisplayEnablePulse+0x1c>
 13c:	08 95       	ret

0000013e <DisplayInit>:

	return data;
}

void DisplayInit()
{
 13e:	cf 93       	push	r28
	BIT_CLEAR(DISPLAY_CTL, DISPLAY_RW);
 140:	82 b1       	in	r24, 0x02	; 2
 142:	8d 7f       	andi	r24, 0xFD	; 253
 144:	82 b9       	out	0x02, r24	; 2
	BIT_CLEAR(DISPLAY_CTL, DISPLAY_RS);
 146:	82 b1       	in	r24, 0x02	; 2
 148:	8e 7f       	andi	r24, 0xFE	; 254
 14a:	82 b9       	out	0x02, r24	; 2
	BIT_CLEAR(DISPLAY_CTL, DISPLAY_EN);
 14c:	82 b1       	in	r24, 0x02	; 2
 14e:	8b 7f       	andi	r24, 0xFB	; 251
 150:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	8f e2       	ldi	r24, 0x2F	; 47
 154:	95 e7       	ldi	r25, 0x75	; 117
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <DisplayInit+0x18>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <DisplayInit+0x1e>
 15c:	00 00       	nop
	 * bit 4: Data bus length = 8
	 * bit 3: Number of lines = 2
	 * bit 2: font size = 5x8
	 */
	_delay_ms(15);
	DISPLAY_DATA = 0b00111000;
 15e:	c8 e3       	ldi	r28, 0x38	; 56
 160:	ca b9       	out	0x0a, r28	; 10
	DisplayEnablePulse();
 162:	de df       	rcall	.-68     	; 0x120 <DisplayEnablePulse>
 164:	8f e0       	ldi	r24, 0x0F	; 15
 166:	97 e2       	ldi	r25, 0x27	; 39
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <DisplayInit+0x2a>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <DisplayInit+0x30>
 16e:	00 00       	nop

	_delay_ms(5);
	DISPLAY_DATA = 0b00111000;
 170:	ca b9       	out	0x0a, r28	; 10
	DisplayEnablePulse();
 172:	d6 df       	rcall	.-84     	; 0x120 <DisplayEnablePulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	87 ec       	ldi	r24, 0xC7	; 199
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <DisplayInit+0x3a>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <DisplayInit+0x40>
 17e:	00 00       	nop

	_delay_us(100);
	DISPLAY_DATA = 0b00111000;
 180:	ca b9       	out	0x0a, r28	; 10
	DisplayEnablePulse();
 182:	ce df       	rcall	.-100    	; 0x120 <DisplayEnablePulse>
	 * Display on
	 * bit 2: Display on
	 * bit 1: Cursor
	 * bit 0: Cursor position
	 */
	DISPLAY_DATA = 0b00001100;
 184:	8c e0       	ldi	r24, 0x0C	; 12
 186:	8a b9       	out	0x0a, r24	; 10
	DisplayEnablePulse();
 188:	cb df       	rcall	.-106    	; 0x120 <DisplayEnablePulse>
	/*
	 * Entry mode set
	 * bit 1: Direction
	 * bit 0: Display shift
	 */
	DISPLAY_DATA = 0b00000111;
 18a:	87 e0       	ldi	r24, 0x07	; 7
 18c:	8a b9       	out	0x0a, r24	; 10
	DisplayEnablePulse();
 18e:	c8 df       	rcall	.-112    	; 0x120 <DisplayEnablePulse>

	/* Display clear */
	DISPLAY_DATA = 0b00000001;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	8a b9       	out	0x0a, r24	; 10
	DisplayEnablePulse();
 194:	c5 df       	rcall	.-118    	; 0x120 <DisplayEnablePulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	8f e9       	ldi	r24, 0x9F	; 159
 198:	9f e0       	ldi	r25, 0x0F	; 15
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <DisplayInit+0x5c>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <DisplayInit+0x62>
 1a0:	00 00       	nop
	_delay_ms(2);
}
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <DisplaySetDDRAM>:
	}
}

void DisplaySetDDRAM(uint8_t addressRAM)
{
	BIT_CLEAR(DISPLAY_CTL, DISPLAY_RS);
 1a6:	92 b1       	in	r25, 0x02	; 2
 1a8:	9e 7f       	andi	r25, 0xFE	; 254
 1aa:	92 b9       	out	0x02, r25	; 2

	DISPLAY_DATA = addressRAM | 0b10000000;
 1ac:	80 68       	ori	r24, 0x80	; 128
 1ae:	8a b9       	out	0x0a, r24	; 10
	DisplayEnablePulse();
 1b0:	b7 df       	rcall	.-146    	; 0x120 <DisplayEnablePulse>
 1b2:	08 95       	ret

000001b4 <DisplayWriteChar>:
}

void DisplayWriteChar(char c)
{
	BIT_SET(DISPLAY_CTL, DISPLAY_RS);
 1b4:	92 b1       	in	r25, 0x02	; 2
 1b6:	91 60       	ori	r25, 0x01	; 1
 1b8:	92 b9       	out	0x02, r25	; 2

	DISPLAY_DATA = c;
 1ba:	8a b9       	out	0x0a, r24	; 10
	DisplayEnablePulse();
 1bc:	b1 df       	rcall	.-158    	; 0x120 <DisplayEnablePulse>
 1be:	08 95       	ret

000001c0 <IntegerToASCII_5digits>:
	BIT_CLEAR(DISPLAY_CTL, DISPLAY_EN);
	_delay_us(40);
}

void IntegerToASCII_5digits(uint16_t number, char *c_number)
{
 1c0:	ef 92       	push	r14
 1c2:	ff 92       	push	r15
 1c4:	0f 93       	push	r16
 1c6:	1f 93       	push	r17
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	e8 2f       	mov	r30, r24
 1ce:	49 2f       	mov	r20, r25
 1d0:	7b 01       	movw	r14, r22
	/* Separate the digits */
    for (int i = 0, j = 10000; i < 5; i++, j/=10)
 1d2:	c0 e1       	ldi	r28, 0x10	; 16
 1d4:	d7 e2       	ldi	r29, 0x27	; 39
 1d6:	20 e0       	ldi	r18, 0x00	; 0
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	13 c0       	rjmp	.+38     	; 0x202 <__DATA_REGION_LENGTH__+0x2>
    {
	    c_number[i] = number / j + 0x30; // + 0x30 to convert to ASCII
 1dc:	87 01       	movw	r16, r14
 1de:	02 0f       	add	r16, r18
 1e0:	13 1f       	adc	r17, r19
 1e2:	8e 2f       	mov	r24, r30
 1e4:	94 2f       	mov	r25, r20
 1e6:	be 01       	movw	r22, r28
 1e8:	df d0       	rcall	.+446    	; 0x3a8 <__udivmodhi4>
 1ea:	60 5d       	subi	r22, 0xD0	; 208
 1ec:	f8 01       	movw	r30, r16
 1ee:	60 83       	st	Z, r22
	    number %= j;
 1f0:	e8 2f       	mov	r30, r24
 1f2:	49 2f       	mov	r20, r25
}

void IntegerToASCII_5digits(uint16_t number, char *c_number)
{
	/* Separate the digits */
    for (int i = 0, j = 10000; i < 5; i++, j/=10)
 1f4:	2f 5f       	subi	r18, 0xFF	; 255
 1f6:	3f 4f       	sbci	r19, 0xFF	; 255
 1f8:	ce 01       	movw	r24, r28
 1fa:	6a e0       	ldi	r22, 0x0A	; 10
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	e8 d0       	rcall	.+464    	; 0x3d0 <__divmodhi4>
 200:	eb 01       	movw	r28, r22
 202:	25 30       	cpi	r18, 0x05	; 5
 204:	31 05       	cpc	r19, r1
 206:	54 f3       	brlt	.-44     	; 0x1dc <IntegerToASCII_5digits+0x1c>
    {
	    c_number[i] = number / j + 0x30; // + 0x30 to convert to ASCII
	    number %= j;
    }
}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	ff 90       	pop	r15
 212:	ef 90       	pop	r14
 214:	08 95       	ret

00000216 <FormatValue>:

void FormatValue(char c[6])
{
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	dc 01       	movw	r26, r24
	/* Swap first zero with space if needed */
	if (c[0] == '0')
 21c:	8c 91       	ld	r24, X
 21e:	80 33       	cpi	r24, 0x30	; 48
 220:	11 f4       	brne	.+4      	; 0x226 <FormatValue+0x10>
	{
		c[0] = ' ';
 222:	80 e2       	ldi	r24, 0x20	; 32
 224:	8c 93       	st	X, r24
	    number %= j;
    }
}

void FormatValue(char c[6])
{
 226:	25 e0       	ldi	r18, 0x05	; 5
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	0b c0       	rjmp	.+22     	; 0x242 <FormatValue+0x2c>
		c[0] = ' ';
	}

	for (int i = 5; i >= 2; i--)
	{
		c[i+1] = c[i];
 22c:	f9 01       	movw	r30, r18
 22e:	31 96       	adiw	r30, 0x01	; 1
 230:	ea 0f       	add	r30, r26
 232:	fb 1f       	adc	r31, r27
 234:	ed 01       	movw	r28, r26
 236:	c2 0f       	add	r28, r18
 238:	d3 1f       	adc	r29, r19
 23a:	88 81       	ld	r24, Y
 23c:	80 83       	st	Z, r24
	if (c[0] == '0')
	{
		c[0] = ' ';
	}

	for (int i = 5; i >= 2; i--)
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	31 09       	sbc	r19, r1
 242:	22 30       	cpi	r18, 0x02	; 2
 244:	31 05       	cpc	r19, r1
 246:	94 f7       	brge	.-28     	; 0x22c <FormatValue+0x16>
	{
		c[i+1] = c[i];
	}

	c[2] = ',';
 248:	8c e2       	ldi	r24, 0x2C	; 44
 24a:	12 96       	adiw	r26, 0x02	; 2
 24c:	8c 93       	st	X, r24
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <DisplayUpdate>:
	DisplayEnablePulse();
	_delay_ms(2);
}

void DisplayUpdate(uint16_t setVoltage, uint16_t measuredVoltage, uint16_t setCurrent, uint16_t measuredCurrent)
{
 254:	cf 92       	push	r12
 256:	df 92       	push	r13
 258:	ef 92       	push	r14
 25a:	ff 92       	push	r15
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
 268:	68 97       	sbiw	r28, 0x18	; 24
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	f8 94       	cli
 26e:	de bf       	out	0x3e, r29	; 62
 270:	0f be       	out	0x3f, r0	; 63
 272:	cd bf       	out	0x3d, r28	; 61
 274:	6b 01       	movw	r12, r22
 276:	7a 01       	movw	r14, r20
 278:	89 01       	movw	r16, r18
	/* Declare local char arrays for ASCII codes */
	char c_setVoltage[6], c_measuredVoltage[6], c_setCurrent[6], c_measuredCurrent[6];

	/* Transform values to ASCII */
	IntegerToASCII_5digits(setVoltage, c_setVoltage);
 27a:	be 01       	movw	r22, r28
 27c:	6f 5f       	subi	r22, 0xFF	; 255
 27e:	7f 4f       	sbci	r23, 0xFF	; 255
 280:	9f df       	rcall	.-194    	; 0x1c0 <IntegerToASCII_5digits>
	IntegerToASCII_5digits(measuredVoltage, c_measuredVoltage);
 282:	be 01       	movw	r22, r28
 284:	69 5f       	subi	r22, 0xF9	; 249
 286:	7f 4f       	sbci	r23, 0xFF	; 255
 288:	c6 01       	movw	r24, r12
 28a:	9a df       	rcall	.-204    	; 0x1c0 <IntegerToASCII_5digits>
	IntegerToASCII_5digits(setCurrent, c_setCurrent);
 28c:	be 01       	movw	r22, r28
 28e:	63 5f       	subi	r22, 0xF3	; 243
 290:	7f 4f       	sbci	r23, 0xFF	; 255
 292:	c7 01       	movw	r24, r14
 294:	95 df       	rcall	.-214    	; 0x1c0 <IntegerToASCII_5digits>
	IntegerToASCII_5digits(measuredCurrent, c_measuredCurrent);
 296:	be 01       	movw	r22, r28
 298:	6d 5e       	subi	r22, 0xED	; 237
 29a:	7f 4f       	sbci	r23, 0xFF	; 255
 29c:	c8 01       	movw	r24, r16
 29e:	90 df       	rcall	.-224    	; 0x1c0 <IntegerToASCII_5digits>

	/* Format the strings for the LCD */
	FormatValue(c_setVoltage);
 2a0:	ce 01       	movw	r24, r28
 2a2:	01 96       	adiw	r24, 0x01	; 1
 2a4:	b8 df       	rcall	.-144    	; 0x216 <FormatValue>
	FormatValue(c_measuredVoltage);
 2a6:	ce 01       	movw	r24, r28
 2a8:	07 96       	adiw	r24, 0x07	; 7
 2aa:	b5 df       	rcall	.-150    	; 0x216 <FormatValue>
	FormatValue(c_setCurrent);
 2ac:	ce 01       	movw	r24, r28
 2ae:	0d 96       	adiw	r24, 0x0d	; 13
 2b0:	b2 df       	rcall	.-156    	; 0x216 <FormatValue>
	FormatValue(c_measuredCurrent);
 2b2:	ce 01       	movw	r24, r28
 2b4:	43 96       	adiw	r24, 0x13	; 19
 2b6:	af df       	rcall	.-162    	; 0x216 <FormatValue>

	/* Print set voltage */
	DisplaySetDDRAM(ADDR_VOLTAGE_SET);
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	75 df       	rcall	.-278    	; 0x1a6 <DisplaySetDDRAM>

	for (int i = 0; i < 6; i++)
 2bc:	00 e0       	ldi	r16, 0x00	; 0
 2be:	10 e0       	ldi	r17, 0x00	; 0
 2c0:	0a c0       	rjmp	.+20     	; 0x2d6 <DisplayUpdate+0x82>
	{
		DisplayWriteChar(c_setVoltage[i]);
 2c2:	e1 e0       	ldi	r30, 0x01	; 1
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	ec 0f       	add	r30, r28
 2c8:	fd 1f       	adc	r31, r29
 2ca:	e0 0f       	add	r30, r16
 2cc:	f1 1f       	adc	r31, r17
 2ce:	80 81       	ld	r24, Z
 2d0:	71 df       	rcall	.-286    	; 0x1b4 <DisplayWriteChar>
	FormatValue(c_measuredCurrent);

	/* Print set voltage */
	DisplaySetDDRAM(ADDR_VOLTAGE_SET);

	for (int i = 0; i < 6; i++)
 2d2:	0f 5f       	subi	r16, 0xFF	; 255
 2d4:	1f 4f       	sbci	r17, 0xFF	; 255
 2d6:	06 30       	cpi	r16, 0x06	; 6
 2d8:	11 05       	cpc	r17, r1
 2da:	9c f3       	brlt	.-26     	; 0x2c2 <DisplayUpdate+0x6e>
	}

	/* Print 2 spaces */

	/* Print measured voltage */
	DisplaySetDDRAM(ADDR_VOLTAGE_MEAS);
 2dc:	89 e0       	ldi	r24, 0x09	; 9
 2de:	63 df       	rcall	.-314    	; 0x1a6 <DisplaySetDDRAM>

	for (int i = 0; i < 6; i++)
 2e0:	00 e0       	ldi	r16, 0x00	; 0
 2e2:	10 e0       	ldi	r17, 0x00	; 0
 2e4:	0a c0       	rjmp	.+20     	; 0x2fa <DisplayUpdate+0xa6>
	{
		DisplayWriteChar(c_measuredVoltage[i]);
 2e6:	e7 e0       	ldi	r30, 0x07	; 7
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	ec 0f       	add	r30, r28
 2ec:	fd 1f       	adc	r31, r29
 2ee:	e0 0f       	add	r30, r16
 2f0:	f1 1f       	adc	r31, r17
 2f2:	80 81       	ld	r24, Z
 2f4:	5f df       	rcall	.-322    	; 0x1b4 <DisplayWriteChar>
	/* Print 2 spaces */

	/* Print measured voltage */
	DisplaySetDDRAM(ADDR_VOLTAGE_MEAS);

	for (int i = 0; i < 6; i++)
 2f6:	0f 5f       	subi	r16, 0xFF	; 255
 2f8:	1f 4f       	sbci	r17, 0xFF	; 255
 2fa:	06 30       	cpi	r16, 0x06	; 6
 2fc:	11 05       	cpc	r17, r1
 2fe:	9c f3       	brlt	.-26     	; 0x2e6 <DisplayUpdate+0x92>
	}

	/* new line */

	/* Print set current */
	DisplaySetDDRAM(ADDR_CURRENT_SET);
 300:	80 e4       	ldi	r24, 0x40	; 64
 302:	51 df       	rcall	.-350    	; 0x1a6 <DisplaySetDDRAM>

	for (int i = 0; i < 6; i++)
 304:	00 e0       	ldi	r16, 0x00	; 0
 306:	10 e0       	ldi	r17, 0x00	; 0
 308:	0a c0       	rjmp	.+20     	; 0x31e <__stack+0x1f>
	{
		DisplayWriteChar(c_setCurrent[i]);
 30a:	ed e0       	ldi	r30, 0x0D	; 13
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	ec 0f       	add	r30, r28
 310:	fd 1f       	adc	r31, r29
 312:	e0 0f       	add	r30, r16
 314:	f1 1f       	adc	r31, r17
 316:	80 81       	ld	r24, Z
 318:	4d df       	rcall	.-358    	; 0x1b4 <DisplayWriteChar>
	/* new line */

	/* Print set current */
	DisplaySetDDRAM(ADDR_CURRENT_SET);

	for (int i = 0; i < 6; i++)
 31a:	0f 5f       	subi	r16, 0xFF	; 255
 31c:	1f 4f       	sbci	r17, 0xFF	; 255
 31e:	06 30       	cpi	r16, 0x06	; 6
 320:	11 05       	cpc	r17, r1
 322:	9c f3       	brlt	.-26     	; 0x30a <__stack+0xb>
	}

	/* Print 2 spaces */

	/* Print measured current */
	DisplaySetDDRAM(ADDR_CURRENT_MEAS);
 324:	89 e4       	ldi	r24, 0x49	; 73
 326:	3f df       	rcall	.-386    	; 0x1a6 <DisplaySetDDRAM>

	for (int i = 0; i < 6; i++)
 328:	00 e0       	ldi	r16, 0x00	; 0
 32a:	10 e0       	ldi	r17, 0x00	; 0
 32c:	0a c0       	rjmp	.+20     	; 0x342 <__stack+0x43>
	{
		DisplayWriteChar(c_measuredCurrent[i]);
 32e:	e3 e1       	ldi	r30, 0x13	; 19
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	ec 0f       	add	r30, r28
 334:	fd 1f       	adc	r31, r29
 336:	e0 0f       	add	r30, r16
 338:	f1 1f       	adc	r31, r17
 33a:	80 81       	ld	r24, Z
 33c:	3b df       	rcall	.-394    	; 0x1b4 <DisplayWriteChar>
	/* Print 2 spaces */

	/* Print measured current */
	DisplaySetDDRAM(ADDR_CURRENT_MEAS);

	for (int i = 0; i < 6; i++)
 33e:	0f 5f       	subi	r16, 0xFF	; 255
 340:	1f 4f       	sbci	r17, 0xFF	; 255
 342:	06 30       	cpi	r16, 0x06	; 6
 344:	11 05       	cpc	r17, r1
 346:	9c f3       	brlt	.-26     	; 0x32e <__stack+0x2f>
	{
		DisplayWriteChar(c_measuredCurrent[i]);
	}
}
 348:	68 96       	adiw	r28, 0x18	; 24
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	f8 94       	cli
 34e:	de bf       	out	0x3e, r29	; 62
 350:	0f be       	out	0x3f, r0	; 63
 352:	cd bf       	out	0x3d, r28	; 61
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17
 35a:	0f 91       	pop	r16
 35c:	ff 90       	pop	r15
 35e:	ef 90       	pop	r14
 360:	df 90       	pop	r13
 362:	cf 90       	pop	r12
 364:	08 95       	ret

00000366 <main>:
	uint16_t setCurrent = 0;		// Set current in mA
	uint16_t measuredVoltage = 0;	// Measured voltage in mV
	uint16_t measuredCurrent = 0;	// Measured current in mA
	
	/* f clock -> 8 MHz */
	ClockPrescalerSet1();
 366:	6f de       	rcall	.-802    	; 0x46 <ClockPrescalerSet1>

	/* Initialize IO */
	IOInit();
 368:	73 de       	rcall	.-794    	; 0x50 <IOInit>

	/* Initialize SPI */
	SPI_MasterInit();
 36a:	78 de       	rcall	.-784    	; 0x5c <SPI_MasterInit>

	/* Initialize Display */
	DisplayInit();
 36c:	e8 de       	rcall	.-560    	; 0x13e <DisplayInit>
		// TODO setting voltage/current with rotary encoders
		setVoltage = 20000;
		setCurrent = 2000;
		
		/* Set voltage */
		DAC_Set(DAC_VOLTAGE, setVoltage / 5);
 36e:	60 ea       	ldi	r22, 0xA0	; 160
 370:	7f e0       	ldi	r23, 0x0F	; 15
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	a1 de       	rcall	.-702    	; 0xb8 <DAC_Set>
		
		/* Set current */
		DAC_Set(DAC_CURRENT, setCurrent << 1);
 376:	60 ea       	ldi	r22, 0xA0	; 160
 378:	7f e0       	ldi	r23, 0x0F	; 15
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	9d de       	rcall	.-710    	; 0xb8 <DAC_Set>
		
		/*
		 * Measure voltage
		 * 12-bit resolution measures voltage in steps of 5 mV
		 */
		measuredVoltage = ADC_Read(ADC_VOLTAGE) * 5;
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	b4 de       	rcall	.-664    	; 0xea <ADC_Read>
 382:	ec 01       	movw	r28, r24
 384:	cc 0f       	add	r28, r28
 386:	dd 1f       	adc	r29, r29
 388:	cc 0f       	add	r28, r28
 38a:	dd 1f       	adc	r29, r29
 38c:	c8 0f       	add	r28, r24
 38e:	d9 1f       	adc	r29, r25
		/*
		 * Measure current
		 * 12-bit resolution measures current in steps of 0.5 mA
		 * only 11 bits are used -> steps of 1 mA
		 */
		measuredCurrent = ADC_Read(ADC_CURRENT) >> 1;
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	ab de       	rcall	.-682    	; 0xea <ADC_Read>
 394:	9c 01       	movw	r18, r24
 396:	36 95       	lsr	r19
 398:	27 95       	ror	r18
		
		/* Update the LCD display */
		DisplayUpdate(setVoltage, measuredVoltage, setCurrent, measuredCurrent);
 39a:	40 ed       	ldi	r20, 0xD0	; 208
 39c:	57 e0       	ldi	r21, 0x07	; 7
 39e:	be 01       	movw	r22, r28
 3a0:	80 e2       	ldi	r24, 0x20	; 32
 3a2:	9e e4       	ldi	r25, 0x4E	; 78
 3a4:	57 df       	rcall	.-338    	; 0x254 <DisplayUpdate>
 3a6:	e3 cf       	rjmp	.-58     	; 0x36e <main+0x8>

000003a8 <__udivmodhi4>:
 3a8:	aa 1b       	sub	r26, r26
 3aa:	bb 1b       	sub	r27, r27
 3ac:	51 e1       	ldi	r21, 0x11	; 17
 3ae:	07 c0       	rjmp	.+14     	; 0x3be <__udivmodhi4_ep>

000003b0 <__udivmodhi4_loop>:
 3b0:	aa 1f       	adc	r26, r26
 3b2:	bb 1f       	adc	r27, r27
 3b4:	a6 17       	cp	r26, r22
 3b6:	b7 07       	cpc	r27, r23
 3b8:	10 f0       	brcs	.+4      	; 0x3be <__udivmodhi4_ep>
 3ba:	a6 1b       	sub	r26, r22
 3bc:	b7 0b       	sbc	r27, r23

000003be <__udivmodhi4_ep>:
 3be:	88 1f       	adc	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	5a 95       	dec	r21
 3c4:	a9 f7       	brne	.-22     	; 0x3b0 <__udivmodhi4_loop>
 3c6:	80 95       	com	r24
 3c8:	90 95       	com	r25
 3ca:	bc 01       	movw	r22, r24
 3cc:	cd 01       	movw	r24, r26
 3ce:	08 95       	ret

000003d0 <__divmodhi4>:
 3d0:	97 fb       	bst	r25, 7
 3d2:	07 2e       	mov	r0, r23
 3d4:	16 f4       	brtc	.+4      	; 0x3da <__divmodhi4+0xa>
 3d6:	00 94       	com	r0
 3d8:	06 d0       	rcall	.+12     	; 0x3e6 <__divmodhi4_neg1>
 3da:	77 fd       	sbrc	r23, 7
 3dc:	08 d0       	rcall	.+16     	; 0x3ee <__divmodhi4_neg2>
 3de:	e4 df       	rcall	.-56     	; 0x3a8 <__udivmodhi4>
 3e0:	07 fc       	sbrc	r0, 7
 3e2:	05 d0       	rcall	.+10     	; 0x3ee <__divmodhi4_neg2>
 3e4:	3e f4       	brtc	.+14     	; 0x3f4 <__divmodhi4_exit>

000003e6 <__divmodhi4_neg1>:
 3e6:	90 95       	com	r25
 3e8:	81 95       	neg	r24
 3ea:	9f 4f       	sbci	r25, 0xFF	; 255
 3ec:	08 95       	ret

000003ee <__divmodhi4_neg2>:
 3ee:	70 95       	com	r23
 3f0:	61 95       	neg	r22
 3f2:	7f 4f       	sbci	r23, 0xFF	; 255

000003f4 <__divmodhi4_exit>:
 3f4:	08 95       	ret

000003f6 <__ashldi3>:
 3f6:	0f 93       	push	r16
 3f8:	08 30       	cpi	r16, 0x08	; 8
 3fa:	90 f0       	brcs	.+36     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3fc:	98 2f       	mov	r25, r24
 3fe:	87 2f       	mov	r24, r23
 400:	76 2f       	mov	r23, r22
 402:	65 2f       	mov	r22, r21
 404:	54 2f       	mov	r21, r20
 406:	43 2f       	mov	r20, r19
 408:	32 2f       	mov	r19, r18
 40a:	22 27       	eor	r18, r18
 40c:	08 50       	subi	r16, 0x08	; 8
 40e:	f4 cf       	rjmp	.-24     	; 0x3f8 <__ashldi3+0x2>
 410:	22 0f       	add	r18, r18
 412:	33 1f       	adc	r19, r19
 414:	44 1f       	adc	r20, r20
 416:	55 1f       	adc	r21, r21
 418:	66 1f       	adc	r22, r22
 41a:	77 1f       	adc	r23, r23
 41c:	88 1f       	adc	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	0a 95       	dec	r16
 422:	b2 f7       	brpl	.-20     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 424:	0f 91       	pop	r16
 426:	08 95       	ret

00000428 <_exit>:
 428:	f8 94       	cli

0000042a <__stop_program>:
 42a:	ff cf       	rjmp	.-2      	; 0x42a <__stop_program>
